[
	{
		"txt": "",
		"why": "br tag like",
		"sentenceIndex": 5088,
		"nouns": [],
		"dOIndex": 0,
		"isQuote": false
	},
	{
		"txt": "Chapter 8. Particles",
		"why": "p",
		"tags": [
			"h2",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5089,
		"nouns": [
			"Chapter",
			"Particles"
		],
		"dOIndex": 1,
		"nouns2": [
			"Chapter",
			"Particles"
		],
		"isQuote": false
	},
	{
		"txt": "In this chapter we'll show ",
		"why": "link",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5090,
		"nouns": [
			"chapter",
			"ll",
			"show"
		],
		"dOIndex": 2,
		"nouns2": [
			"chapter"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5091,
		"nouns": [],
		"dOIndex": 3,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "you how to apply what you've learned in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5092,
		"nouns": [
			"ve"
		],
		"dOIndex": 4,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Chapter 7",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5093,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 5,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " in a simple particle simulator. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5094,
		"nouns": [
			"particle",
			"simulator"
		],
		"dOIndex": 6,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"simulator"
		]
	},
	{
		"txt": " Before getting to the specifics of the example we'll present, let's consider particles in general. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5095,
		"nouns": [
			"specifics",
			"example",
			"ll",
			"particles"
		],
		"dOIndex": 7,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Before",
			"specifics",
			"example",
			"particles"
		]
	},
	{
		"txt": " Particles are simple idealizations that can be used to simulate all sorts of phenomena or special effects within a game. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5096,
		"nouns": [
			"Particles",
			"idealizations",
			"sorts",
			"phenomena",
			"effects",
			"game"
		],
		"dOIndex": 8,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particles",
			"idealizations",
			"phenomena",
			"effects"
		]
	},
	{
		"txt": " For example, particle simulations are often used to simulate smoke, fire, and explosions. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5097,
		"nouns": [
			"example",
			"particle",
			"simulations",
			"smoke",
			"fire",
			"explosions"
		],
		"dOIndex": 9,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"particle",
			"simulations",
			"explosions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.13333333333333333,
			"words": [
				"fire"
			],
			"positive": [],
			"negative": [
				"fire"
			]
		}
	},
	{
		"txt": " They can also be used to simulate water, dust clouds, and swarms of insects, among many other things. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5098,
		"nouns": [
			"water",
			"dust",
			"clouds",
			"swarms",
			"insects",
			"things"
		],
		"dOIndex": 10,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"insects"
		]
	},
	{
		"txt": " Really, your imagination is the only limit. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5099,
		"nouns": [
			"imagination",
			"limit"
		],
		"dOIndex": 11,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Really",
			"imagination"
		]
	},
	{
		"txt": " Particles lend themselves to simulating both discrete objects like bouncing balls and continua like water. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5100,
		"nouns": [
			"Particles",
			"both",
			"objects",
			"balls",
			"continua",
			"water"
		],
		"dOIndex": 12,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particles",
			"objects",
			"continua"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.23529411764705882,
			"words": [
				"like",
				"like"
			],
			"positive": [
				"like",
				"like"
			],
			"negative": []
		}
	},
	{
		"txt": " Plus, you can easily ascribe an array of attributes to particles depending on what you're modeling.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5101,
		"nouns": [
			"Plus",
			"array",
			"attributes",
			"particles",
			"re"
		],
		"dOIndex": 13,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"attributes",
			"particles"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5102,
		"nouns": [],
		"dOIndex": 14,
		"isQuote": false
	},
	{
		"txt": "For example, say, you're modeling fire using particles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5103,
		"nouns": [
			"example",
			"re",
			"fire",
			"particles"
		],
		"dOIndex": 15,
		"nouns2": [
			"example",
			"particles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.2222222222222222,
			"words": [
				"fire"
			],
			"positive": [],
			"negative": [
				"fire"
			]
		},
		"isQuote": false
	},
	{
		"txt": " Each particle will rise in the air, and as it cools its color will change until it fades away. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5104,
		"nouns": [
			"particle",
			"rise",
			"air",
			"color",
			"change",
			"fades"
		],
		"dOIndex": 16,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.047619047619047616,
			"words": [
				"rise"
			],
			"positive": [
				"rise"
			],
			"negative": []
		}
	},
	{
		"txt": " You can tie the particle's color to its temperature, which is modeled using thermodynamics. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5105,
		"nouns": [
			"tie",
			"particle",
			"color",
			"temperature",
			"thermodynamics"
		],
		"dOIndex": 17,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"temperature",
			"thermodynamics"
		]
	},
	{
		"txt": " The attribute you'd want to track is the particle's temperature. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5106,
		"nouns": [
			"attribute",
			"track",
			"particle",
			"temperature"
		],
		"dOIndex": 18,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"attribute",
			"particle",
			"temperature"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.08333333333333333,
			"words": [
				"want"
			],
			"positive": [
				"want"
			],
			"negative": []
		}
	},
	{
		"txt": " In a previous work, ",
		"why": "link",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5107,
		"nouns": [
			"work"
		],
		"dOIndex": 19,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "AI for Game Programmers (O'Reilly), this book's coauthor ",
		"why": "lastExUIWasLink",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5108,
		"nouns": [
			"Game",
			"Programmers",
			"book",
			"coauthor"
		],
		"dOIndex": 20,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Programmers",
			"Reilly",
			"coauthor"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5109,
		"nouns": [],
		"dOIndex": 21,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "David M. Bourg used particles to represent swarms of insects that would swarm, flock, chase, and evade depending on the artificial intelligence (AI). ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5110,
		"nouns": [
			"David M",
			"Bourg",
			"particles",
			"swarms",
			"insects",
			"flock",
			"chase",
			"intelligence"
		],
		"dOIndex": 22,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"insects",
			"intelligence"
		]
	},
	{
		"txt": " The AI controlled their behavior, which was then implemented as a system of particles using principles very similar to what you'll see in this chapter.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5111,
		"nouns": [
			"AI",
			"behavior",
			"system",
			"particles",
			"principles",
			"ll",
			"chapter"
		],
		"dOIndex": 23,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"behavior",
			"particles",
			"principles",
			"chapter"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5112,
		"nouns": [],
		"dOIndex": 24,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5113,
		"nouns": [],
		"dOIndex": 25,
		"isQuote": false
	},
	{
		"txt": "Particles are not limited to collections of independent objects either. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5114,
		"nouns": [
			"Particles",
			"collections",
			"objects"
		],
		"dOIndex": 26,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particles",
			"collections",
			"objects"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.09090909090909091,
			"words": [
				"limited"
			],
			"positive": [
				"limited"
			],
			"negative": []
		}
	},
	{
		"txt": " Later in this book, you'll learn how to connect particles together using springs to create deformable objects such as cloth. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5115,
		"nouns": [
			"book",
			"ll",
			"particles",
			"springs",
			"deformable",
			"objects",
			"cloth"
		],
		"dOIndex": 27,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"springs",
			"deformable",
			"objects"
		]
	},
	{
		"txt": " Particles are extremely versatile, and you'll do well to learn how to leverage their simplicity.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5116,
		"nouns": [
			"Particles",
			"ll",
			"leverage",
			"simplicity"
		],
		"dOIndex": 28,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particles",
			"leverage",
			"simplicity"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.0625,
			"words": [
				"simplicity"
			],
			"positive": [
				"simplicity"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5117,
		"nouns": [],
		"dOIndex": 29,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5118,
		"nouns": [],
		"dOIndex": 30,
		"isQuote": false
	},
	{
		"txt": "You can use ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5119,
		"nouns": [
			"use"
		],
		"dOIndex": 31,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "particles to model sand in a simple phone application that simulates an hourglass. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5120,
		"nouns": [
			"particles",
			"model",
			"sand",
			"phone",
			"application",
			"hourglass"
		],
		"dOIndex": 32,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"application",
			"hourglass"
		]
	},
	{
		"txt": " Couple this sand model with the accelerometer techniques you'll learn about in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5121,
		"nouns": [
			"sand",
			"model",
			"accelerometer",
			"techniques",
			"ll"
		],
		"dOIndex": 33,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Couple",
			"accelerometer",
			"techniques"
		]
	},
	{
		"txt": "Chapter 21",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5122,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 34,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " , and you'll be able to make the sand flow by turning the phone over.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5123,
		"nouns": [
			"ll",
			"sand",
			"flow",
			"phone"
		],
		"dOIndex": 35,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5124,
		"nouns": [],
		"dOIndex": 36,
		"isQuote": false
	},
	{
		"txt": "You can easily use particles to simulate bullets flying out of a gun. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5125,
		"nouns": [
			"use",
			"particles",
			"bullets",
			"gun"
		],
		"dOIndex": 37,
		"nouns2": [
			"particles",
			"bullets"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.07142857142857142,
			"words": [
				"gun"
			],
			"positive": [],
			"negative": [
				"gun"
			]
		},
		"isQuote": false
	},
	{
		"txt": " Imagine a Gatling gun spewing forth a hail of lead, all simulated using simple particles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5126,
		"nouns": [
			"gun",
			"hail",
			"particles"
		],
		"dOIndex": 38,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Imagine",
			"Gatling",
			"particles"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.058823529411764705,
			"words": [
				"hail",
				"gun"
			],
			"positive": [
				"hail"
			],
			"negative": [
				"gun"
			]
		}
	},
	{
		"txt": " Speaking of spewing, how about using particles to simulate debris flung from an erupting volcano as a special effect in your adventure game set in prehistoric times? ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5127,
		"nouns": [
			"particles",
			"debris",
			"volcano",
			"effect",
			"adventure",
			"game",
			"times"
		],
		"dOIndex": 39,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Speaking",
			"particles",
			"volcano",
			"adventure"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.06896551724137931,
			"words": [
				"adventure"
			],
			"positive": [
				"adventure"
			],
			"negative": []
		}
	},
	{
		"txt": " Remember the Wooly Willy toy? ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5128,
		"nouns": [
			"toy"
		],
		"dOIndex": 40,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Remember"
		]
	},
	{
		"txt": " To make particles a direct part of game play, consider a diversionary application where you drag piles of virtual magnetic particles around a portrait photograph, giving someone a lovely beard or mustache much like Wooly Willy.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5129,
		"nouns": [
			"particles",
			"part",
			"game",
			"application",
			"drag",
			"piles",
			"particles",
			"portrait",
			"photograph",
			"someone",
			"beard",
			"mustache"
		],
		"dOIndex": 41,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"application",
			"portrait",
			"photograph",
			"someone",
			"mustache"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.10810810810810811,
			"words": [
				"like",
				"lovely",
				"drag"
			],
			"positive": [
				"like",
				"lovely"
			],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5130,
		"nouns": [],
		"dOIndex": 42,
		"isQuote": false
	},
	{
		"txt": "Hopefully, you're now thinking of creative ways to use particles in your games. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5131,
		"nouns": [
			"re",
			"ways",
			"use",
			"particles",
			"games"
		],
		"dOIndex": 43,
		"nouns2": [
			"Hopefully",
			"particles"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.2857142857142857,
			"words": [
				"creative",
				"hopefully"
			],
			"positive": [
				"creative",
				"hopefully"
			],
			"negative": []
		},
		"isQuote": false
	},
	{
		"txt": " So, let's address implementation. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5132,
		"nouns": [
			"address",
			"implementation"
		],
		"dOIndex": 44,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"address",
			"implementation"
		]
	},
	{
		"txt": " There are two basic ingredients to implementing a particle simulator: the particle model and the integrator . ",
		"why": "split inside sentence",
		"tags": [
			"em",
			"p",
			"section"
		],
		"sentenceIndex": 5133,
		"nouns": [
			"two",
			"ingredients",
			"particle",
			"simulator",
			"particle",
			"model",
			"integrator"
		],
		"dOIndex": 45,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"ingredients",
			"particle",
			"simulator",
			"integrator"
		]
	},
	{
		"txt": " (Well, you could argue that a third basic ingredient is ",
		"why": "link",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5134,
		"nouns": [
			"third",
			"ingredient"
		],
		"dOIndex": 46,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"ingredient"
		]
	},
	{
		"txt": "the renderer, where you actually draw the particles, but that's more graphics than physics, and we're focusing on modeling and integrating in this book.)",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5135,
		"nouns": [
			"renderer",
			"particles",
			"graphics",
			"physics",
			"re",
			"book"
		],
		"dOIndex": 47,
		"nouns2": [
			"renderer",
			"particles",
			"graphics",
			"physics"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5136,
		"nouns": [],
		"dOIndex": 48,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5137,
		"nouns": [],
		"dOIndex": 49,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "The model very ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5138,
		"nouns": [
			"model"
		],
		"dOIndex": 50,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "simply describes the attributes of the particles in the simulation along with their rules of behavior. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5139,
		"nouns": [
			"attributes",
			"particles",
			"simulation",
			"rules",
			"behavior"
		],
		"dOIndex": 51,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"attributes",
			"particles",
			"simulation",
			"behavior"
		]
	},
	{
		"txt": " We mean this in the physics sense and not the AI sense in this book, although in general the model you implement may very well include suitable AI rules. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5140,
		"nouns": [
			"physics",
			"sense",
			"AI",
			"sense",
			"book",
			"model",
			"rules"
		],
		"dOIndex": 52,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"physics"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.06451612903225806,
			"words": [
				"suitable"
			],
			"positive": [
				"suitable"
			],
			"negative": []
		}
	},
	{
		"txt": " Now, the integrator is ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5141,
		"nouns": [
			"integrator"
		],
		"dOIndex": 53,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integrator"
		]
	},
	{
		"txt": "responsible for updating the state of the particles throughout the simulation. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5142,
		"nouns": [
			"state",
			"particles",
			"simulation"
		],
		"dOIndex": 54,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"simulation"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.16666666666666666,
			"words": [
				"responsible"
			],
			"positive": [
				"responsible"
			],
			"negative": []
		}
	},
	{
		"txt": " In this chapter, the particles' states will be described by their position and velocity at any given time. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5143,
		"nouns": [
			"chapter",
			"particles",
			"states",
			"position",
			"velocity",
			"time"
		],
		"dOIndex": 55,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"chapter",
			"particles",
			"position",
			"velocity"
		]
	},
	{
		"txt": " The integrator will update each particle's state under the influence of several external stimuli forces such as gravity, aerodynamic drag, and collisions.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5144,
		"nouns": [
			"integrator",
			"particle",
			"state",
			"influence",
			"stimuli",
			"forces",
			"gravity",
			"drag",
			"collisions"
		],
		"dOIndex": 56,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integrator",
			"particle",
			"influence",
			"stimuli",
			"gravity",
			"collisions"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.13043478260869565,
			"words": [
				"collisions",
				"drag"
			],
			"positive": [],
			"negative": [
				"collisions",
				"drag"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5145,
		"nouns": [],
		"dOIndex": 57,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5146,
		"nouns": [],
		"dOIndex": 58,
		"isQuote": false
	},
	{
		"txt": "The rest of this chapter will walk you through the details of a simple particle simulation in an incremental manner. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5147,
		"nouns": [
			"rest",
			"chapter",
			"details",
			"particle",
			"simulation",
			"manner"
		],
		"dOIndex": 59,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"chapter",
			"details",
			"particle",
			"simulation"
		]
	},
	{
		"txt": " The first task will be to simulate a set of particles falling under the influence of gravity alone. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5148,
		"nouns": [
			"first",
			"task",
			"particles",
			"influence",
			"gravity"
		],
		"dOIndex": 60,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"influence",
			"gravity"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.15,
			"words": [
				"alone",
				"falling"
			],
			"positive": [],
			"negative": [
				"alone",
				"falling"
			]
		}
	},
	{
		"txt": " Even though this sounds elementary, such an example encompasses all of the basic ingredients mentioned earlier. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5149,
		"nouns": [
			"example",
			"ingredients"
		],
		"dOIndex": 61,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"ingredients"
		]
	},
	{
		"txt": " Once gravity is under control, we'll show you how to implement still air drag and wind forces to influence the particles' motion. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5150,
		"nouns": [
			"gravity",
			"control",
			"ll",
			"show",
			"air",
			"drag",
			"wind",
			"forces",
			"influence",
			"particles",
			"motion"
		],
		"dOIndex": 62,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"gravity",
			"control",
			"influence",
			"particles"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.041666666666666664,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " Then, we'll make things more interesting by showing you how to implement collision response between the particles and a ground plane plus random obstacles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5151,
		"nouns": [
			"ll",
			"things",
			"collision",
			"response",
			"particles",
			"ground",
			"plane",
			"obstacles"
		],
		"dOIndex": 63,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"response",
			"particles",
			"obstacles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07692307692307693,
			"words": [
				"obstacles",
				"collision",
				"interesting"
			],
			"positive": [
				"interesting"
			],
			"negative": [
				"obstacles",
				"collision"
			]
		}
	},
	{
		"txt": " This collision stuff will draw on material presented in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5152,
		"nouns": [
			"collision",
			"stuff"
		],
		"dOIndex": 64,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.18181818181818182,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": "Chapter 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5153,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 65,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " , so be sure to read that chapter first if you have not already done so.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5154,
		"nouns": [
			"chapter",
			"first"
		],
		"dOIndex": 66,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"chapter"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5155,
		"nouns": [],
		"dOIndex": 67,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5156,
		"nouns": [],
		"dOIndex": 68,
		"isQuote": false
	},
	{
		"txt": "Figure 8 1 through ",
		"why": "link",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5157,
		"nouns": [
			"Figure"
		],
		"dOIndex": 69,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": "Figure 8 4",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5158,
		"nouns": [
			"Figure"
		],
		"dOIndex": 70,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " show a few frames of this example simulation complete with obstacles and collisions. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5159,
		"nouns": [
			"show",
			"frames",
			"example",
			"simulation",
			"obstacles",
			"collisions"
		],
		"dOIndex": 71,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"simulation",
			"obstacles",
			"collisions"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.26666666666666666,
			"words": [
				"collisions",
				"obstacles"
			],
			"positive": [],
			"negative": [
				"collisions",
				"obstacles"
			]
		}
	},
	{
		"txt": " Use your imagination here to visualize the particles falling under the influence of gravity until they impact the circular objects, at which time they bounce around and ultimately settle on the ground.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5160,
		"nouns": [
			"imagination",
			"particles",
			"influence",
			"gravity",
			"impact",
			"objects",
			"time",
			"ground"
		],
		"dOIndex": 72,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"imagination",
			"particles",
			"influence",
			"gravity",
			"objects"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.030303030303030304,
			"words": [
				"falling"
			],
			"positive": [],
			"negative": [
				"falling"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"section"
		],
		"sentenceIndex": 5161,
		"nouns": [],
		"dOIndex": 73,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5162,
		"nouns": [],
		"dOIndex": 74,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5163,
		"nouns": [],
		"dOIndex": 75,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5164,
		"nouns": [],
		"dOIndex": 76,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5165,
		"nouns": [],
		"dOIndex": 77,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 1. Particles falling under the influence of gravity",
		"why": "link",
		"tags": [
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5166,
		"nouns": [
			"Figure",
			"Particles",
			"influence",
			"gravity"
		],
		"dOIndex": 78,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure",
			"Particles",
			"influence",
			"gravity"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.125,
			"words": [
				"falling"
			],
			"positive": [],
			"negative": [
				"falling"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5167,
		"nouns": [],
		"dOIndex": 79,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5168,
		"nouns": [],
		"dOIndex": 80,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5169,
		"nouns": [],
		"dOIndex": 81,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5170,
		"nouns": [],
		"dOIndex": 82,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 2. Particles impacting circular objects",
		"why": "link",
		"tags": [
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5171,
		"nouns": [
			"Figure",
			"Particles",
			"objects"
		],
		"dOIndex": 83,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure",
			"Particles",
			"objects"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5172,
		"nouns": [],
		"dOIndex": 84,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5173,
		"nouns": [],
		"dOIndex": 85,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5174,
		"nouns": [],
		"dOIndex": 86,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5175,
		"nouns": [],
		"dOIndex": 87,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 3. More collisions",
		"why": "link",
		"tags": [
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5176,
		"nouns": [
			"Figure",
			"collisions"
		],
		"dOIndex": 88,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure",
			"collisions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.6666666666666666,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5177,
		"nouns": [],
		"dOIndex": 89,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5178,
		"nouns": [],
		"dOIndex": 90,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5179,
		"nouns": [],
		"dOIndex": 91,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5180,
		"nouns": [],
		"dOIndex": 92,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 4. Particles coming to rest on the ground plane",
		"why": "p",
		"tags": [
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5181,
		"nouns": [
			"Figure",
			"Particles",
			"rest",
			"ground",
			"plane"
		],
		"dOIndex": 93,
		"nouns2": [
			"Figure",
			"Particles"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5182,
		"nouns": [],
		"dOIndex": 94,
		"isQuote": false
	},
	{
		"txt": "While working through this chapter, keep in mind that everything you're learning here will be directly applicable to 2D and 3D simulations. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5183,
		"nouns": [
			"chapter",
			"mind",
			"re",
			"D",
			"D",
			"simulations"
		],
		"dOIndex": 95,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"chapter",
			"simulations"
		]
	},
	{
		"txt": " Chapters following this one will build on the material covered here. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5184,
		"nouns": [
			"Chapters",
			"one"
		],
		"dOIndex": 96,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapters"
		]
	},
	{
		"txt": " We'll focus on two dimensions in this chapter and later in the book we'll show you how to extend the simulation to 3D. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5185,
		"nouns": [
			"ll",
			"focus",
			"two",
			"dimensions",
			"chapter",
			"book",
			"ll",
			"show",
			"simulation",
			"D"
		],
		"dOIndex": 97,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"dimensions",
			"chapter",
			"simulation"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.04,
			"words": [
				"extend"
			],
			"positive": [
				"extend"
			],
			"negative": []
		}
	},
	{
		"txt": " Actually, for particle simulations it's almost trivial to make the leap from 2D to 3D. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5186,
		"nouns": [
			"particle",
			"simulations",
			"leap",
			"D",
			"D"
		],
		"dOIndex": 98,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Actually",
			"particle",
			"simulations"
		]
	},
	{
		"txt": " Trust us on this ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5187,
		"nouns": [
			"Trust"
		],
		"dOIndex": 99,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": 1,
			"comparative": 0.16666666666666666,
			"words": [
				"trust"
			],
			"positive": [
				"trust"
			],
			"negative": []
		}
	},
	{
		"txt": "for now.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5188,
		"nouns": [],
		"dOIndex": 100,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"a",
			"p",
			"section"
		],
		"sentenceIndex": 5189,
		"nouns": [],
		"dOIndex": 101,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5190,
		"nouns": [],
		"dOIndex": 102,
		"isQuote": false
	},
	{
		"txt": "Simple Particle Model",
		"why": "p",
		"tags": [
			"a",
			"h2",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5191,
		"nouns": [
			"Particle",
			"Model"
		],
		"dOIndex": 103,
		"nouns2": [
			"Simple",
			"Particle"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5192,
		"nouns": [],
		"dOIndex": 104,
		"isQuote": false
	},
	{
		"txt": "The particle model ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5193,
		"nouns": [
			"particle",
			"model"
		],
		"dOIndex": 105,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5194,
		"nouns": [],
		"dOIndex": 106,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "we'll begin with is very simple. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5195,
		"nouns": [
			"ll"
		],
		"dOIndex": 107,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " All we want to achieve at first is to have the particles fall under the ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5196,
		"nouns": [
			"first",
			"particles",
			"fall"
		],
		"dOIndex": 108,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.058823529411764705,
			"words": [
				"want"
			],
			"positive": [
				"want"
			],
			"negative": []
		}
	},
	{
		"txt": "influence of gravity. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5197,
		"nouns": [
			"influence",
			"gravity"
		],
		"dOIndex": 109,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"influence",
			"gravity"
		]
	},
	{
		"txt": " The particles will be initialized with an altitude above a ground plane. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5198,
		"nouns": [
			"particles",
			"altitude",
			"ground",
			"plane"
		],
		"dOIndex": 110,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"altitude"
		]
	},
	{
		"txt": " Upon the start of the simulation, gravity will act on each particle, continuously causing each to accelerate toward the ground plane, gaining speed as it goes. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5199,
		"nouns": [
			"start",
			"simulation",
			"gravity",
			"act",
			"particle",
			"ground",
			"plane"
		],
		"dOIndex": 111,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation",
			"gravity",
			"particle"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.07142857142857142,
			"words": [
				"gaining"
			],
			"positive": [
				"gaining"
			],
			"negative": []
		}
	},
	{
		"txt": " Imagine holding a handful of small rocks up high and then releasing them. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5200,
		"nouns": [
			"handful",
			"rocks"
		],
		"dOIndex": 112,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Imagine",
			"handful"
		]
	},
	{
		"txt": " Simple, huh?",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5201,
		"nouns": [],
		"dOIndex": 113,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Simple"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5202,
		"nouns": [],
		"dOIndex": 114,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5203,
		"nouns": [],
		"dOIndex": 115,
		"isQuote": false
	},
	{
		"txt": "There are several particle attributes we must consider even for this simple example. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5204,
		"nouns": [
			"particle",
			"attributes",
			"example"
		],
		"dOIndex": 116,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"attributes",
			"example"
		]
	},
	{
		"txt": " Our model assumes that each particle has mass, and a set diameter (we're assuming our particles are circles in 2D or spheres in 3D), occupies some position in space, and is traveling at some velocity. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5205,
		"nouns": [
			"model",
			"particle",
			"mass",
			"diameter",
			"re",
			"particles",
			"circles",
			"D",
			"spheres",
			"D",
			"position",
			"space",
			"velocity"
		],
		"dOIndex": 117,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"diameter",
			"particles",
			"circles",
			"spheres",
			"position",
			"velocity"
		]
	},
	{
		"txt": " Additionally, each particle is acted upon by some net external force, which is the aggregate of all forces acting on the particle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5206,
		"nouns": [
			"particle",
			"force",
			"forces",
			"particle"
		],
		"dOIndex": 118,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Additionally",
			"particle"
		]
	},
	{
		"txt": " These forces will be gravity alone to start with, but will eventually include drag and impact forces. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5207,
		"nouns": [
			"forces",
			"gravity",
			"drag",
			"impact",
			"forces"
		],
		"dOIndex": 119,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"gravity"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.15789473684210525,
			"words": [
				"drag",
				"alone"
			],
			"positive": [],
			"negative": [
				"drag",
				"alone"
			]
		}
	},
	{
		"txt": " We set up a Particle class to encapsulate these attributes as follows:",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5208,
		"nouns": [
			"Particle",
			"class",
			"attributes"
		],
		"dOIndex": 120,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particle",
			"attributes"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5209,
		"nouns": [],
		"dOIndex": 121,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5210,
		"nouns": [],
		"dOIndex": 122,
		"isQuote": false
	},
	{
		"txt": "Most of these attributes are self explanatory given the comments we've included. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5211,
		"nouns": [
			"attributes",
			"self",
			"comments",
			"ve"
		],
		"dOIndex": 123,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"attributes",
			"comments"
		]
	},
	{
		"txt": " Notice that several of these attributes are Vector types. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5212,
		"nouns": [
			"Notice",
			"attributes",
			"Vector",
			"types"
		],
		"dOIndex": 124,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Notice",
			"attributes",
			"Vector"
		]
	},
	{
		"txt": " These vectors are defined in the custom math library we've included in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5213,
		"nouns": [
			"vectors",
			"custom",
			"math",
			"library",
			"ve"
		],
		"dOIndex": 125,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vectors",
			"library"
		]
	},
	{
		"txt": "Appendix A",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5214,
		"nouns": [
			"Appendix"
		],
		"dOIndex": 126,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Appendix"
		]
	},
	{
		"txt": " . ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5215,
		"nouns": [],
		"dOIndex": 127,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " This type makes managing vectors and performing arithmetic operations with them a breeze. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5216,
		"nouns": [
			"type",
			"vectors",
			"arithmetic",
			"operations",
			"breeze"
		],
		"dOIndex": 128,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vectors",
			"arithmetic",
			"operations"
		]
	},
	{
		"txt": " Take a look at ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5217,
		"nouns": [
			"look"
		],
		"dOIndex": 129,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Appendix A",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5218,
		"nouns": [
			"Appendix"
		],
		"dOIndex": 130,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Appendix"
		]
	},
	{
		"txt": " to see what this custom type does. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5219,
		"nouns": [
			"custom",
			"type"
		],
		"dOIndex": 131,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " We'll just remind you of the data structure Vector uses: ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5220,
		"nouns": [
			"ll",
			"data",
			"structure Vector"
		],
		"dOIndex": 132,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"structure",
			"Vector"
		]
	},
	{
		"txt": "three scalars called x, y, and z",
		"why": "lastExUIWasLink",
		"tags": [
			"em",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5221,
		"nouns": [
			"three",
			"scalars",
			"x",
			"y",
			"z"
		],
		"dOIndex": 133,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"scalars"
		]
	},
	{
		"txt": " representing the three dimensions of a location or of a movement in some direction. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5222,
		"nouns": [
			"three",
			"dimensions",
			"location",
			"movement",
			"direction"
		],
		"dOIndex": 134,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"dimensions",
			"location",
			"movement",
			"direction"
		]
	},
	{
		"txt": " The z component will always be set to 0 in this chapter's examples.",
		"why": "split inside sentence",
		"tags": [
			"em",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5223,
		"nouns": [
			"z",
			"component",
			"chapter",
			"examples"
		],
		"dOIndex": 135,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"component",
			"chapter",
			"examples"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5224,
		"nouns": [],
		"dOIndex": 136,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5225,
		"nouns": [],
		"dOIndex": 137,
		"isQuote": false
	},
	{
		"txt": "You should have noticed the fSpeed property in the Particle class. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5226,
		"nouns": [
			"property",
			"Particle",
			"class"
		],
		"dOIndex": 138,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"property",
			"Particle"
		]
	},
	{
		"txt": " This property stores the magnitude of the velocity vector, the particle's speed. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5227,
		"nouns": [
			"property",
			"stores",
			"magnitude",
			"velocity",
			"vector",
			"particle"
		],
		"dOIndex": 139,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"property",
			"magnitude",
			"velocity",
			"particle"
		]
	},
	{
		"txt": " We'll use this later when computing aerodynamic drag forces. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5228,
		"nouns": [
			"ll",
			"use",
			"drag",
			"forces"
		],
		"dOIndex": 140,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": -1,
			"comparative": -0.09090909090909091,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " We've also included a Vector type property called vGravity , which stores the gravity force vector defining the magnitude and the direction in which the gravity force acts. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5229,
		"nouns": [
			"ve",
			"Vector",
			"type",
			"property",
			"vGravity",
			"stores",
			"gravity",
			"force",
			"vector",
			"magnitude",
			"direction",
			"gravity",
			"force",
			"acts"
		],
		"dOIndex": 141,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Vector",
			"property",
			"vGravity",
			"gravity",
			"magnitude",
			"direction"
		]
	},
	{
		"txt": " This is not really necessary, as you could hardcode the gravity force vector or use a global variable; however, we've included it here to illustrate some creative flexibility. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5230,
		"nouns": [
			"hardcode",
			"gravity",
			"force",
			"vector",
			"use",
			"ve",
			"flexibility"
		],
		"dOIndex": 142,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"hardcode",
			"gravity",
			"flexibility"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.06666666666666667,
			"words": [
				"creative"
			],
			"positive": [
				"creative"
			],
			"negative": []
		}
	},
	{
		"txt": " For example, you could redefine the gravity vector in a game that uses ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5231,
		"nouns": [
			"example",
			"gravity",
			"vector",
			"game"
		],
		"dOIndex": 143,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"gravity"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5232,
		"nouns": [],
		"dOIndex": 144,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "accelerometer input to determine gravity's direction with respect to a particular device's orientation (see ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5233,
		"nouns": [
			"accelerometer",
			"input",
			"gravity",
			"direction",
			"respect",
			"device",
			"orientation"
		],
		"dOIndex": 145,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"accelerometer",
			"gravity",
			"direction",
			"respect",
			"orientation"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.13333333333333333,
			"words": [
				"respect"
			],
			"positive": [
				"respect"
			],
			"negative": []
		}
	},
	{
		"txt": "Chapter 21",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5234,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 146,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " ). ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5235,
		"nouns": [],
		"dOIndex": 147,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " And you may have a game where some particles react to different gravities depending on their type, which can be of your own concoction.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5236,
		"nouns": [
			"game",
			"particles",
			"gravities",
			"type",
			"concoction"
		],
		"dOIndex": 148,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"gravities",
			"concoction"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5237,
		"nouns": [],
		"dOIndex": 149,
		"isQuote": false
	},
	{
		"txt": "Aside from properties, you'll notice several methods in the Particle class. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5238,
		"nouns": [
			"properties",
			"ll",
			"notice",
			"methods",
			"Particle",
			"class"
		],
		"dOIndex": 150,
		"nouns2": [
			"properties",
			"methods",
			"Particle"
		],
		"isQuote": false
	},
	{
		"txt": " The constructor is trivial. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5239,
		"nouns": [
			"constructor"
		],
		"dOIndex": 151,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"constructor"
		]
	},
	{
		"txt": " It sets everything to 0 except the particle's mass, radius, and the gravity force vector. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5240,
		"nouns": [
			"sets",
			"particle",
			"mass",
			"radius",
			"gravity",
			"force",
			"vector"
		],
		"dOIndex": 152,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"gravity"
		]
	},
	{
		"txt": " The following code illustrates how everything is initialized:",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5241,
		"nouns": [
			"code"
		],
		"dOIndex": 153,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5242,
		"nouns": [],
		"dOIndex": 154,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5243,
		"nouns": [],
		"dOIndex": 155,
		"isQuote": false
	},
	{
		"txt": "Now is probably a good time to explain the ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5244,
		"nouns": [
			"time"
		],
		"dOIndex": 156,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": 3,
			"comparative": 0.3,
			"words": [
				"good"
			],
			"positive": [
				"good"
			],
			"negative": []
		}
	},
	{
		"txt": "coordinate system we've assumed. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5245,
		"nouns": [
			"system",
			"ve"
		],
		"dOIndex": 157,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " Our world origin is located at the lower left corner of the example program's window with positive x pointing to the right and positive y pointing up. ",
		"why": "split inside sentence",
		"tags": [
			"em",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5246,
		"nouns": [
			"world",
			"origin",
			"corner",
			"example",
			"program",
			"window",
			"x",
			"right",
			"y"
		],
		"dOIndex": 158,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"program"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.13793103448275862,
			"words": [
				"positive",
				"positive"
			],
			"positive": [
				"positive",
				"positive"
			],
			"negative": []
		}
	},
	{
		"txt": " The acceleration due to gravity acts downward (i.e., in the negative y direction). ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5247,
		"nouns": [
			"acceleration",
			"gravity",
			"acts",
			"e",
			"y",
			"direction"
		],
		"dOIndex": 159,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"acceleration",
			"gravity",
			"direction"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.13333333333333333,
			"words": [
				"negative"
			],
			"positive": [],
			"negative": [
				"negative"
			]
		}
	},
	{
		"txt": " We're using the SI system of units and have defined the acceleration due to gravity as follows:",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5248,
		"nouns": [
			"re",
			"SI",
			"system",
			"units",
			"acceleration",
			"gravity"
		],
		"dOIndex": 160,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"acceleration",
			"gravity"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5249,
		"nouns": [],
		"dOIndex": 161,
		"isQuote": false
	},
	{
		"txt": "link https:2 in the negative y direction. ",
		"why": "split inside sentence",
		"tags": [
			"sup",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5250,
		"nouns": [
			"link",
			"https",
			"y",
			"direction"
		],
		"dOIndex": 162,
		"nouns2": [
			"direction"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.25,
			"words": [
				"negative"
			],
			"positive": [],
			"negative": [
				"negative"
			]
		},
		"isQuote": false
	},
	{
		"txt": "link https:2 , or 9.8 newtons of force. ",
		"why": "split inside sentence",
		"tags": [
			"sup",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5251,
		"nouns": [
			"link",
			"https",
			"newtons",
			"force"
		],
		"dOIndex": 163,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"newtons"
		]
	},
	{
		"txt": " We've set the radius of each particle to one tenth of a meter. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5252,
		"nouns": [
			"ve",
			"radius",
			"particle",
			"one",
			"meter"
		],
		"dOIndex": 164,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		]
	},
	{
		"txt": " These masses and radii are really arbitrary; you can set them to anything suitable for what you're modeling.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5253,
		"nouns": [
			"masses",
			"radii",
			"re"
		],
		"dOIndex": 165,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": 2,
			"comparative": 0.10526315789473684,
			"words": [
				"suitable"
			],
			"positive": [
				"suitable"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5254,
		"nouns": [],
		"dOIndex": 166,
		"isQuote": false
	},
	{
		"txt": "The CalcLoads method is responsible for computing all the loads forces acting on the particle, with the exception of impact forces (we'll handle those later). ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5255,
		"nouns": [
			"CalcLoads",
			"method",
			"loads",
			"forces",
			"particle",
			"exception",
			"impact",
			"forces",
			"ll"
		],
		"dOIndex": 167,
		"nouns2": [
			"CalcLoads",
			"particle",
			"exception"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.07692307692307693,
			"words": [
				"responsible"
			],
			"positive": [
				"responsible"
			],
			"negative": []
		},
		"isQuote": false
	},
	{
		"txt": " For now, the only force acting on the particles is that due to gravity, or simply, the weight of each particle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5256,
		"nouns": [
			"force",
			"particles",
			"gravity",
			"weight",
			"particle"
		],
		"dOIndex": 168,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"gravity",
			"particle"
		]
	},
	{
		"txt": " CalcLoads is very simple at this point:",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5257,
		"nouns": [
			"CalcLoads",
			"point"
		],
		"dOIndex": 169,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"CalcLoads"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5258,
		"nouns": [],
		"dOIndex": 170,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5259,
		"nouns": [],
		"dOIndex": 171,
		"isQuote": false
	},
	{
		"txt": "The first order of business is to reset the vForces vector. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5260,
		"nouns": [
			"first",
			"order",
			"business",
			"reset",
			"vForces",
			"vector"
		],
		"dOIndex": 172,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"business",
			"vForces"
		]
	},
	{
		"txt": " vForces is the vector containing the net force acting on the particle. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5261,
		"nouns": [
			"vForces",
			"vector",
			"force",
			"particle"
		],
		"dOIndex": 173,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vForces",
			"particle"
		]
	},
	{
		"txt": " All of these forces are aggregated in CalcLoads, as shown by the line vForces += vGravity . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5262,
		"nouns": [
			"forces",
			"CalcLoads",
			"line",
			"vForces",
			"+=",
			"vGravity"
		],
		"dOIndex": 174,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"CalcLoads",
			"vForces",
			"vGravity"
		]
	},
	{
		"txt": " Again, so far, the only force to aggregate is that due ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5263,
		"nouns": [
			"force"
		],
		"dOIndex": 175,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5264,
		"nouns": [],
		"dOIndex": 176,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5265,
		"nouns": [],
		"dOIndex": 177,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "to gravity.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5266,
		"nouns": [
			"gravity"
		],
		"dOIndex": 178,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"gravity"
		]
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5267,
		"nouns": [],
		"dOIndex": 179,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5268,
		"nouns": [],
		"dOIndex": 180,
		"isQuote": false
	},
	{
		"txt": "Integrator",
		"why": "p",
		"tags": [
			"a",
			"h3",
			"div",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5269,
		"nouns": [
			"Integrator"
		],
		"dOIndex": 181,
		"nouns2": [
			"Integrator"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5270,
		"nouns": [],
		"dOIndex": 182,
		"isQuote": false
	},
	{
		"txt": "The UpdateBodyEuler method ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5271,
		"nouns": [
			"UpdateBodyEuler",
			"method"
		],
		"dOIndex": 183,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"UpdateBodyEuler"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5272,
		"nouns": [],
		"dOIndex": 184,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5273,
		"nouns": [],
		"dOIndex": 185,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "integrates the equations of motion",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5274,
		"nouns": [
			"equations",
			"motion"
		],
		"dOIndex": 186,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"equations"
		]
	},
	{
		"txt": " for each particle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5275,
		"nouns": [
			"particle"
		],
		"dOIndex": 187,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		]
	},
	{
		"txt": " Since we're dealing with particles, the only equation of motion we need concern ourselves with is that for translation; rotation does not matter for particles (at least not for us here). ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5276,
		"nouns": [
			"re",
			"particles",
			"equation",
			"motion",
			"concern",
			"translation",
			"rotation",
			"matter",
			"particles"
		],
		"dOIndex": 188,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"equation",
			"concern",
			"translation",
			"rotation"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.030303030303030304,
			"words": [
				"matter"
			],
			"positive": [],
			"negative": [
				"matter"
			]
		}
	},
	{
		"txt": " The following code sample shows UpdateBodyEuler .",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5277,
		"nouns": [
			"code",
			"sample",
			"UpdateBodyEuler"
		],
		"dOIndex": 189,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"UpdateBodyEuler"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5278,
		"nouns": [],
		"dOIndex": 190,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5279,
		"nouns": [],
		"dOIndex": 191,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5280,
		"nouns": [],
		"dOIndex": 192,
		"isQuote": false
	},
	{
		"txt": "As the name of this method implies, we've implemented Euler's method ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5281,
		"nouns": [
			"name",
			"method",
			"ve",
			"Euler",
			"method"
		],
		"dOIndex": 193,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "of integration as described in ",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5282,
		"nouns": [
			"integration"
		],
		"dOIndex": 194,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integration"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5283,
		"nouns": [],
		"dOIndex": 195,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Chapter 7 . ",
		"why": "split inside sentence",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5284,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 196,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " Using this method, we simply need to divide the aggregate forces acting on a particle by the mass of the particle to get the particle's acceleration. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5285,
		"nouns": [
			"method",
			"forces",
			"particle",
			"mass",
			"particle",
			"particle",
			"acceleration"
		],
		"dOIndex": 197,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"acceleration"
		],
		"highfreq": {
			"particle": 3
		}
	},
	{
		"txt": " The line of code a = vForces / fMass does just this. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5286,
		"nouns": [
			"line",
			"code",
			"vForces",
			"/",
			"fMass"
		],
		"dOIndex": 198,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vForces"
		]
	},
	{
		"txt": " Notice here that a is a Vector, as is vForces . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5287,
		"nouns": [
			"Notice",
			"Vector",
			"vForces"
		],
		"dOIndex": 199,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Notice",
			"Vector",
			"vForces"
		]
	},
	{
		"txt": " fMass is a scalar, and the / operator defined in the Vector class takes care of dividing each component of the vForces vector by fMass and setting the corresponding components in a . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5288,
		"nouns": [
			"fMass",
			"/",
			"operator",
			"Vector",
			"class",
			"care",
			"component",
			"vForces",
			"vector",
			"fMass",
			"components"
		],
		"dOIndex": 200,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"operator",
			"Vector",
			"component",
			"vForces",
			"components"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.05714285714285714,
			"words": [
				"care"
			],
			"positive": [
				"care"
			],
			"negative": []
		}
	},
	{
		"txt": " The change in velocity, dv, is equal to acceleration times the change in time, dt . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5289,
		"nouns": [
			"change",
			"velocity",
			"dv",
			"acceleration",
			"times",
			"change",
			"time",
			"dt"
		],
		"dOIndex": 201,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"acceleration"
		]
	},
	{
		"txt": " The particle's new velocity is then computed by the line vVelocity += dv . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5290,
		"nouns": [
			"particle",
			"velocity",
			"line",
			"vVelocity",
			"+=",
			"dv"
		],
		"dOIndex": 202,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"velocity",
			"vVelocity"
		]
	},
	{
		"txt": " Here again, vVelocity and dv are Vectors and the += operator takes care of the vector arithmetic. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5291,
		"nouns": [
			"vVelocity",
			"dv",
			"Vectors",
			"+=",
			"operator",
			"care",
			"vector",
			"arithmetic"
		],
		"dOIndex": 203,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vVelocity",
			"Vectors",
			"operator",
			"arithmetic"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.10526315789473684,
			"words": [
				"care"
			],
			"positive": [
				"care"
			],
			"negative": []
		}
	},
	{
		"txt": " This is the first actual integration.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5292,
		"nouns": [
			"first",
			"integration"
		],
		"dOIndex": 204,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integration"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5293,
		"nouns": [],
		"dOIndex": 205,
		"isQuote": false
	},
	{
		"txt": "The second integration takes place in the next few lines, where we determine the particle's displacement and new position by integrating its velocity. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5294,
		"nouns": [
			"second",
			"integration",
			"place",
			"lines",
			"particle",
			"displacement",
			"position",
			"velocity"
		],
		"dOIndex": 206,
		"nouns2": [
			"integration",
			"particle",
			"displacement",
			"position",
			"velocity"
		],
		"isQuote": false
	},
	{
		"txt": " The line ds = vVelocity * dt determines the displacement, or change in the particle's position, and the line vPosition += ds computes the new position by adding the displacement to the particle's old position.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5295,
		"nouns": [
			"line",
			"ds",
			"vVelocity",
			"dt",
			"displacement",
			"change",
			"particle",
			"position",
			"line",
			"vPosition",
			"+=",
			"ds",
			"position",
			"displacement",
			"particle",
			"position"
		],
		"dOIndex": 207,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vVelocity",
			"displacement",
			"particle",
			"position",
			"vPosition"
		],
		"highfreq": {
			"position": 3
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5296,
		"nouns": [],
		"dOIndex": 208,
		"isQuote": false
	},
	{
		"txt": "The last line in UpdateBodyEuler computes the particle's speed by taking the magnitude of its velocity vector.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5297,
		"nouns": [
			"line",
			"UpdateBodyEuler",
			"particle",
			"magnitude",
			"velocity",
			"vector"
		],
		"dOIndex": 209,
		"nouns2": [
			"UpdateBodyEuler",
			"particle",
			"magnitude",
			"velocity"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5298,
		"nouns": [],
		"dOIndex": 210,
		"isQuote": false
	},
	{
		"txt": "For demonstration purposes, using Euler's method is just fine. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5299,
		"nouns": [
			"demonstration",
			"purposes",
			"Euler",
			"method"
		],
		"dOIndex": 211,
		"nouns2": [
			"demonstration",
			"purposes"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.1,
			"words": [
				"fine",
				"demonstration"
			],
			"positive": [
				"fine"
			],
			"negative": [
				"demonstration"
			]
		},
		"isQuote": false
	},
	{
		"txt": " In an actual game, the more robust method described in ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5300,
		"nouns": [
			"game",
			"method"
		],
		"dOIndex": 212,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": 2,
			"comparative": 0.16666666666666666,
			"words": [
				"robust"
			],
			"positive": [
				"robust"
			],
			"negative": []
		}
	},
	{
		"txt": "Chapter 7",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5301,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 213,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " is advised.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5302,
		"nouns": [],
		"dOIndex": 214,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5303,
		"nouns": [],
		"dOIndex": 215,
		"isQuote": false
	},
	{
		"txt": "Rendering",
		"why": "p",
		"tags": [
			"h3",
			"div",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5304,
		"nouns": [],
		"dOIndex": 216,
		"nouns2": [
			"Rendering"
		],
		"isQuote": false
	},
	{
		"txt": "In this example, rendering ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5305,
		"nouns": [
			"example"
		],
		"dOIndex": 217,
		"nouns2": [
			"example"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5306,
		"nouns": [],
		"dOIndex": 218,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5307,
		"nouns": [],
		"dOIndex": 219,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "the particles is rather trivial. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5308,
		"nouns": [
			"particles"
		],
		"dOIndex": 220,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles"
		]
	},
	{
		"txt": " All we do is draw little circles using Windows API calls wrapped in our own functions to hide some of the Windows specific code. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5309,
		"nouns": [
			"circles",
			"Windows API",
			"functions",
			"Windows",
			"code"
		],
		"dOIndex": 221,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"circles",
			"Windows",
			"functions"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.038461538461538464,
			"words": [
				"hide"
			],
			"positive": [],
			"negative": [
				"hide"
			]
		}
	},
	{
		"txt": " The following code snippet is all we need to render the particles.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5310,
		"nouns": [
			"code",
			"snippet",
			"particles"
		],
		"dOIndex": 222,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"snippet",
			"particles"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5311,
		"nouns": [],
		"dOIndex": 223,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5312,
		"nouns": [],
		"dOIndex": 224,
		"isQuote": false
	},
	{
		"txt": "You can use your own rendering code here, of course, and all you really need to pay close attention to is converting from world coordinates to window coordinates. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5313,
		"nouns": [
			"use",
			"code",
			"course",
			"attention",
			"world",
			"coordinates",
			"window",
			"coordinates"
		],
		"dOIndex": 225,
		"nouns2": [
			"attention",
			"coordinates"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.034482758620689655,
			"words": [
				"pay"
			],
			"positive": [],
			"negative": [
				"pay"
			]
		},
		"isQuote": false
	},
	{
		"txt": " Remember, we've assumed our world coordinate system origin is in the lower left corner of the window, whereas the window drawing coordinate system has its origin in the upper left corner of the window. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5314,
		"nouns": [
			"ve",
			"world",
			"system",
			"origin",
			"corner",
			"window",
			"window",
			"system",
			"origin",
			"corner",
			"window"
		],
		"dOIndex": 226,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Remember"
		],
		"highfreq": {
			"window": 3
		}
	},
	{
		"txt": " To transform coordinates in this example, all you need to do is subtract the particle's y position from the height of the window.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5315,
		"nouns": [
			"coordinates",
			"example",
			"particle",
			"y",
			"position",
			"height",
			"window"
		],
		"dOIndex": 227,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"coordinates",
			"example",
			"particle",
			"position"
		]
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5316,
		"nouns": [],
		"dOIndex": 228,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5317,
		"nouns": [],
		"dOIndex": 229,
		"isQuote": false
	},
	{
		"txt": "The Basic Simulator",
		"why": "p",
		"tags": [
			"a",
			"h2",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5318,
		"nouns": [
			"Basic Simulator"
		],
		"dOIndex": 230,
		"nouns2": [
			"Simulator"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5319,
		"nouns": [],
		"dOIndex": 231,
		"isQuote": false
	},
	{
		"txt": "The heart of this ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5320,
		"nouns": [
			"heart"
		],
		"dOIndex": 232,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "simulation is handled by the Particle",
		"why": "lastExUIWasLink",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5321,
		"nouns": [
			"simulation",
			"Particle"
		],
		"dOIndex": 233,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation",
			"Particle"
		]
	},
	{
		"txt": " class described earlier. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5322,
		"nouns": [
			"class"
		],
		"dOIndex": 234,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " However, we need to show you how that class is used in the context of the main program.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5323,
		"nouns": [
			"show",
			"class",
			"context",
			"program"
		],
		"dOIndex": 235,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"However",
			"context",
			"program"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5324,
		"nouns": [],
		"dOIndex": 236,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5325,
		"nouns": [],
		"dOIndex": 237,
		"isQuote": false
	},
	{
		"txt": "First, we define a few global variables as follows:",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5326,
		"nouns": [
			"First",
			"variables"
		],
		"dOIndex": 238,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"variables"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5327,
		"nouns": [],
		"dOIndex": 239,
		"isQuote": false
	},
	{
		"txt": "FrameCounter counts the number of time steps integrated before the graphics display is updated. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5328,
		"nouns": [
			"FrameCounter",
			"counts",
			"number",
			"time",
			"steps",
			"graphics",
			"display"
		],
		"dOIndex": 240,
		"nouns2": [
			"FrameCounter",
			"graphics",
			"display"
		],
		"isQuote": false
	},
	{
		"txt": " How many time steps you allow the simulation to integrate before updating the display is a matter of tuning. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5329,
		"nouns": [
			"time",
			"steps",
			"simulation",
			"display",
			"matter"
		],
		"dOIndex": 241,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation",
			"display"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.09523809523809523,
			"words": [
				"matter",
				"allow"
			],
			"positive": [
				"matter",
				"allow"
			],
			"negative": []
		}
	},
	{
		"txt": " You'll see how this is used momentarily when we discuss the UpdateSimulation function. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5330,
		"nouns": [
			"ll",
			"UpdateSimulation",
			"function"
		],
		"dOIndex": 242,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"UpdateSimulation",
			"function"
		]
	},
	{
		"txt": " Units is an array of Particle types. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5331,
		"nouns": [
			"Units",
			"array",
			"Particle",
			"types"
		],
		"dOIndex": 243,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particle"
		]
	},
	{
		"txt": " These will represent moving particles in the simulation the ones that fall from above and bounce off the circular objects we'll add later.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5332,
		"nouns": [
			"particles",
			"simulation",
			"ones",
			"fall",
			"objects",
			"ll"
		],
		"dOIndex": 244,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"simulation",
			"objects"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5333,
		"nouns": [],
		"dOIndex": 245,
		"isQuote": false
	},
	{
		"txt": "For the most part, each unit is initialized in accordance with the Particle constructor shown earlier. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5334,
		"nouns": [
			"part",
			"unit",
			"accordance",
			"Particle",
			"constructor"
		],
		"dOIndex": 246,
		"nouns2": [
			"accordance",
			"Particle",
			"constructor"
		],
		"isQuote": false
	},
	{
		"txt": " However, their positions are all at the origin, so we make a call to the following Initialize function to randomly distribute the particles in the upper middle portion of the screen within a rectangle of width _SPAWN_AREA_R*4 and a height of _SPAWN_AREA_R, where _SPAWN_AREA_R is just a global define we made up.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5335,
		"nouns": [
			"positions",
			"origin",
			"call",
			"Initialize",
			"function",
			"particles",
			"middle",
			"portion",
			"screen",
			"rectangle",
			"width",
			"_SPAWN_AREA_R*",
			"height",
			"_SPAWN_AREA_R",
			"_SPAWN_AREA_R"
		],
		"dOIndex": 247,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"However",
			"positions",
			"Initialize",
			"function",
			"particles",
			"portion",
			"rectangle",
			"_SPAWN_AREA_R*",
			"_SPAWN_AREA_R"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5336,
		"nouns": [],
		"dOIndex": 248,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5337,
		"nouns": [],
		"dOIndex": 249,
		"isQuote": false
	},
	{
		"txt": "OK, now let's consider UpdateSimulation as shown in the code snippet that follows. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5338,
		"nouns": [
			"UpdateSimulation",
			"code",
			"snippet"
		],
		"dOIndex": 250,
		"nouns2": [
			"UpdateSimulation",
			"snippet"
		],
		"isQuote": false
	},
	{
		"txt": " This function gets called every cycle through the program's main message loop and is responsible for cycling through all the Units , making appropriate function calls to update their positions, and rendering the scene.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5339,
		"nouns": [
			"function",
			"cycle",
			"program",
			"message",
			"loop",
			"Units",
			"function",
			"positions",
			"scene"
		],
		"dOIndex": 251,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"function",
			"program",
			"message",
			"positions"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.11428571428571428,
			"words": [
				"appropriate",
				"responsible"
			],
			"positive": [
				"appropriate",
				"responsible"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5340,
		"nouns": [],
		"dOIndex": 252,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5341,
		"nouns": [],
		"dOIndex": 253,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5342,
		"nouns": [],
		"dOIndex": 254,
		"isQuote": false
	},
	{
		"txt": "The two local variables in UpdateSimulation are dt and i . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5343,
		"nouns": [
			"two",
			"variables",
			"UpdateSimulation",
			"dt"
		],
		"dOIndex": 255,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"variables",
			"UpdateSimulation"
		]
	},
	{
		"txt": " i is trivial and serves as a counter variable. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5344,
		"nouns": [
			"counter"
		],
		"dOIndex": 256,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"counter"
		]
	},
	{
		"txt": " dt represents the small yet finite amount of time, in seconds, over which each integration step is taken. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5345,
		"nouns": [
			"dt",
			"amount",
			"time",
			"seconds",
			"integration",
			"step"
		],
		"dOIndex": 257,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"seconds",
			"integration"
		]
	},
	{
		"txt": " The global define_TIMESTEP stores the time step, which we have set to 0.1 seconds. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5346,
		"nouns": [
			"define_TIMESTEP",
			"stores",
			"time",
			"step",
			"seconds"
		],
		"dOIndex": 258,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"define_TIMESTEP",
			"seconds"
		]
	},
	{
		"txt": " This value is subject to tuning, which we'll discuss toward the end of this chapter in the section ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5347,
		"nouns": [
			"value",
			"subject",
			"ll",
			"end",
			"chapter",
			"section"
		],
		"dOIndex": 259,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"subject",
			"chapter",
			"section"
		]
	},
	{
		"txt": "Tuning",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5348,
		"nouns": [],
		"dOIndex": 260,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Tuning"
		]
	},
	{
		"txt": " .",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5349,
		"nouns": [],
		"dOIndex": 261,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5350,
		"nouns": [],
		"dOIndex": 262,
		"isQuote": false
	},
	{
		"txt": "The next segment of code checks the value of the frame counter, and if the frame counter has reached the defined number of frames, stored in _RENDER_FRAME_COUNT , then the back buffer is cleared to prepare it for drawing upon and ultimately copying to the screen.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5351,
		"nouns": [
			"segment",
			"code",
			"checks",
			"value",
			"frame",
			"counter",
			"frame",
			"counter",
			"number",
			"frames",
			"_RENDER_FRAME_COUNT",
			"buffer",
			"screen"
		],
		"dOIndex": 263,
		"nouns2": [
			"segment",
			"counter",
			"_RENDER_FRAME_COUNT"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.043478260869565216,
			"words": [
				"cleared",
				"reached"
			],
			"positive": [
				"cleared",
				"reached"
			],
			"negative": []
		},
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5352,
		"nouns": [],
		"dOIndex": 264,
		"isQuote": false
	},
	{
		"txt": "The next section of code under the comment update the particles does just that by calling the CalcLoads and UpdateBodyEuler methods of each Unit . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5353,
		"nouns": [
			"section",
			"code",
			"comment",
			"particles",
			"CalcLoads",
			"UpdateBodyEuler",
			"methods",
			"Unit"
		],
		"dOIndex": 265,
		"nouns2": [
			"section",
			"comment",
			"particles",
			"CalcLoads",
			"UpdateBodyEuler",
			"methods"
		],
		"isQuote": false
	},
	{
		"txt": " These two lines are responsible for updating all the forces acting on each particle and then integrating the equation of motion for each particle.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5354,
		"nouns": [
			"two",
			"lines",
			"forces",
			"particle",
			"equation",
			"motion",
			"particle"
		],
		"dOIndex": 266,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"equation"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.08,
			"words": [
				"responsible"
			],
			"positive": [
				"responsible"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5355,
		"nouns": [],
		"dOIndex": 267,
		"isQuote": false
	},
	{
		"txt": "The next few lines within the for loop draw each particle if required and wrap each particle's position around the window extents should they progress beyond the edges of the window. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5356,
		"nouns": [
			"lines",
			"loop",
			"particle",
			"particle",
			"position",
			"window",
			"extents",
			"progress",
			"edges",
			"window"
		],
		"dOIndex": 268,
		"nouns2": [
			"particle",
			"position",
			"extents",
			"progress"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.0625,
			"words": [
				"progress"
			],
			"positive": [
				"progress"
			],
			"negative": []
		},
		"isQuote": false
	},
	{
		"txt": " Note that we're using window coordinates in this ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5357,
		"nouns": [
			"re",
			"window",
			"coordinates"
		],
		"dOIndex": 269,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"coordinates"
		]
	},
	{
		"txt": "example.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5358,
		"nouns": [
			"example"
		],
		"dOIndex": 270,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example"
		]
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5359,
		"nouns": [],
		"dOIndex": 271,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5360,
		"nouns": [],
		"dOIndex": 272,
		"isQuote": false
	},
	{
		"txt": "Implementing External Forces",
		"why": "p",
		"tags": [
			"a",
			"h2",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5361,
		"nouns": [
			"Forces"
		],
		"dOIndex": 273,
		"nouns2": [
			"Implementing",
			"External",
			"Forces"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5362,
		"nouns": [],
		"dOIndex": 274,
		"isQuote": false
	},
	{
		"txt": "We'll add a ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5363,
		"nouns": [
			"ll"
		],
		"dOIndex": 275,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "couple of simple external forces to start with ",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5364,
		"nouns": [
			"couple",
			"forces"
		],
		"dOIndex": 276,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5365,
		"nouns": [],
		"dOIndex": 277,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5366,
		"nouns": [],
		"dOIndex": 278,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "still air drag, and wind force. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5367,
		"nouns": [
			"air",
			"drag",
			"wind",
			"force"
		],
		"dOIndex": 279,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": -1,
			"comparative": -0.14285714285714285,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " We'll use the formulas presented in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5368,
		"nouns": [
			"ll",
			"use",
			"formulas"
		],
		"dOIndex": 280,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"formulas"
		]
	},
	{
		"txt": "Chapter 3",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5369,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 281,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " to approximate these forces, treating them in a similar manner. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5370,
		"nouns": [
			"forces",
			"manner"
		],
		"dOIndex": 282,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " Recall that still air drag is the aerodynamic drag force acting against an object moving at some speed through still air. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5371,
		"nouns": [
			"air",
			"drag",
			"drag",
			"force",
			"object",
			"air"
		],
		"dOIndex": 283,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Recall"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08695652173913043,
			"words": [
				"drag",
				"drag"
			],
			"positive": [],
			"negative": [
				"drag",
				"drag"
			]
		}
	},
	{
		"txt": " Drag always acts to resist motion. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5372,
		"nouns": [
			"acts",
			"motion"
		],
		"dOIndex": 284,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": -1,
			"comparative": -0.125,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " While we'll use the same formulas to compute a wind force, recall that wind force may not necessarily act to impede motion. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5373,
		"nouns": [
			"ll",
			"use",
			"formulas",
			"wind",
			"force",
			"wind",
			"force",
			"act",
			"motion"
		],
		"dOIndex": 285,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"formulas"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08333333333333333,
			"words": [
				"impede"
			],
			"positive": [],
			"negative": [
				"impede"
			]
		}
	},
	{
		"txt": " You could have a tailwind pushing an object along, or the wind could come from any direction with components that push the object sideways. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5374,
		"nouns": [
			"tailwind",
			"object",
			"wind",
			"direction",
			"components",
			"object"
		],
		"dOIndex": 286,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"tailwind",
			"direction",
			"components"
		]
	},
	{
		"txt": " In this example we'll assume a side wind from left to right, acting to push the particles sideways, with the still air drag resisting their falling motion. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5375,
		"nouns": [
			"example",
			"ll",
			"side",
			"wind",
			"right",
			"particles",
			"air",
			"drag",
			"motion"
		],
		"dOIndex": 287,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"particles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.06896551724137931,
			"words": [
				"falling",
				"drag"
			],
			"positive": [],
			"negative": [
				"falling",
				"drag"
			]
		}
	},
	{
		"txt": " When we add collisions later, this same drag formulation will act to resist particle motion in any direction in which they travel as they bounce around.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5376,
		"nouns": [
			"collisions",
			"drag",
			"formulation",
			"act",
			"particle",
			"motion",
			"direction",
			"travel"
		],
		"dOIndex": 288,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collisions",
			"formulation",
			"particle",
			"direction"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.1111111111111111,
			"words": [
				"drag",
				"collisions"
			],
			"positive": [],
			"negative": [
				"drag",
				"collisions"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5377,
		"nouns": [],
		"dOIndex": 289,
		"isQuote": false
	},
	{
		"txt": "The formula we'll use to model still air drag is:Fd = ½ ρV2ACd",
		"why": "p",
		"tags": [
			"sub",
			"td",
			"tr",
			"tbody",
			"table",
			"div",
			"section"
		],
		"sentenceIndex": 5378,
		"nouns": [
			"formula",
			"ll",
			"use",
			"model",
			"air",
			"drag",
			"Fd",
			"½",
			"ρV",
			"ACd"
		],
		"dOIndex": 290,
		"nouns2": [
			"formula"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.07692307692307693,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		},
		"isQuote": false
	},
	{
		"txt": "Here Fd is the magnitude of the drag force. ",
		"why": "split inside sentence",
		"tags": [
			"sub",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5379,
		"nouns": [
			"Fd",
			"magnitude",
			"drag",
			"force"
		],
		"dOIndex": 291,
		"nouns2": [
			"magnitude"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.1,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		},
		"isQuote": false
	},
	{
		"txt": " Its direction is directly opposite the velocity of the moving particle. ρ is the density of air through which the particle moves, V is the magnitude of the particle's velocity (its speed), A is the projected area of the particle as though it's a sphere, and Cd is a drag coefficient.",
		"why": "split inside sentence",
		"tags": [
			"sub",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5380,
		"nouns": [
			"direction",
			"velocity",
			"particle",
			"ρ",
			"density",
			"air",
			"particle",
			"moves",
			"V",
			"magnitude",
			"particle",
			"velocity",
			"area",
			"particle",
			"sphere",
			"Cd",
			"drag",
			"coefficient"
		],
		"dOIndex": 292,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"direction",
			"velocity",
			"particle",
			"density",
			"magnitude",
			"coefficient"
		],
		"highfreq": {
			"particle": 4
		},
		"sentiment": {
			"score": -1,
			"comparative": -0.019230769230769232,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5381,
		"nouns": [],
		"dOIndex": 293,
		"isQuote": false
	},
	{
		"txt": "We can use this same formula to estimate the wind force pushing the particle sideways. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5382,
		"nouns": [
			"use",
			"formula",
			"estimate",
			"wind",
			"force",
			"particle"
		],
		"dOIndex": 294,
		"nouns2": [
			"formula",
			"estimate",
			"particle"
		],
		"isQuote": false
	},
	{
		"txt": " The only difference this time is that V is the wind speed, and the direction of the resulting wind force is from our assumed left to right direction.",
		"why": "split inside sentence",
		"tags": [
			"em",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5383,
		"nouns": [
			"difference",
			"time",
			"V",
			"wind",
			"direction",
			"wind",
			"force",
			"right",
			"direction"
		],
		"dOIndex": 295,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"difference",
			"direction"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5384,
		"nouns": [],
		"dOIndex": 296,
		"isQuote": false
	},
	{
		"txt": "To add these two forces to our simulation, we need to make a few additions to the Particle class's CalcLoads method. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5385,
		"nouns": [
			"two",
			"forces",
			"simulation",
			"additions",
			"Particle",
			"class",
			"CalcLoads",
			"method"
		],
		"dOIndex": 297,
		"nouns2": [
			"simulation",
			"additions",
			"Particle",
			"CalcLoads"
		],
		"isQuote": false
	},
	{
		"txt": " The following code shows how CalcLoads looks now. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5386,
		"nouns": [
			"code",
			"CalcLoads"
		],
		"dOIndex": 298,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"CalcLoads"
		]
	},
	{
		"txt": " Remember, all we had in here originally were the first three lines of executable code shown next the code that initializes the aggregate force vector and then the line of code that adds the force due to gravity to the aggregate force. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5387,
		"nouns": [
			"first",
			"three",
			"lines",
			"executable",
			"code",
			"code",
			"initializes",
			"force",
			"vector",
			"line",
			"code",
			"force",
			"gravity",
			"force"
		],
		"dOIndex": 299,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Remember",
			"executable",
			"initializes",
			"gravity"
		],
		"highfreq": {
			"code": 3,
			"force": 3
		}
	},
	{
		"txt": " All the rest of the code in this method is new.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5388,
		"nouns": [
			"rest",
			"code",
			"method"
		],
		"dOIndex": 300,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5389,
		"nouns": [],
		"dOIndex": 301,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5390,
		"nouns": [],
		"dOIndex": 302,
		"isQuote": false
	},
	{
		"txt": "So after the force due to gravity is added to the aggregate, two new local variables are declared. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5391,
		"nouns": [
			"force",
			"gravity",
			"two",
			"variables"
		],
		"dOIndex": 303,
		"nouns2": [
			"gravity",
			"variables"
		],
		"isQuote": false
	},
	{
		"txt": " vDrag is a vector that will represent the still air drag force. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5392,
		"nouns": [
			"vDrag",
			"vector",
			"air",
			"drag",
			"force"
		],
		"dOIndex": 304,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": -1,
			"comparative": -0.07142857142857142,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " fDrag is the magnitude of that drag force. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5393,
		"nouns": [
			"fDrag",
			"magnitude",
			"drag",
			"force"
		],
		"dOIndex": 305,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"magnitude"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.1,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " Since we know the drag force vector is exactly opposite to the particle's velocity vector, we can equate vDrag to negative vVelocity and then normalize vDrag to obtain a unit vector pointing in a direction opposite of the particle's velocity. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5394,
		"nouns": [
			"drag",
			"force",
			"vector",
			"particle",
			"velocity",
			"vector",
			"vDrag",
			"vVelocity",
			"vDrag",
			"unit",
			"vector",
			"direction",
			"particle",
			"velocity"
		],
		"dOIndex": 306,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"velocity",
			"vVelocity",
			"direction"
		],
		"highfreq": {
			"vector": 3
		},
		"sentiment": {
			"score": -3,
			"comparative": -0.07142857142857142,
			"words": [
				"negative",
				"drag"
			],
			"positive": [],
			"negative": [
				"negative",
				"drag"
			]
		}
	},
	{
		"txt": " Next we compute the magnitude of the drag force using the formula shown earlier. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5395,
		"nouns": [
			"magnitude",
			"drag",
			"force",
			"formula"
		],
		"dOIndex": 307,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"magnitude",
			"formula"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.0625,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " This line handles that:",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"section"
		],
		"sentenceIndex": 5396,
		"nouns": [
			"line"
		],
		"dOIndex": 308,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5397,
		"nouns": [],
		"dOIndex": 309,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5398,
		"nouns": [],
		"dOIndex": 310,
		"isQuote": false
	},
	{
		"txt": "Here, _AIRDENSITY is a global definelink https:3 (standard air at 15°C). ",
		"why": "split inside sentence",
		"tags": [
			"sup",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5399,
		"nouns": [
			"_AIRDENSITY",
			"definelink",
			"https",
			"air",
			"°C"
		],
		"dOIndex": 311,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"_AIRDENSITY",
			"definelink"
		]
	},
	{
		"txt": " fSpeed is the particle's speed: the magnitude of its velocity. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5400,
		"nouns": [
			"particle",
			"magnitude",
			"velocity"
		],
		"dOIndex": 312,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"magnitude",
			"velocity"
		]
	},
	{
		"txt": " The 3.14159 * fRadius * fRadius line represents the projected area of the particle assuming the particle is a sphere. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5401,
		"nouns": [
			"fRadius",
			"fRadius",
			"line",
			"area",
			"particle",
			"particle",
			"sphere"
		],
		"dOIndex": 313,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"fRadius",
			"particle"
		]
	},
	{
		"txt": " And finally, _DRAGCOEFFICIENT is a drag coefficient that we have set to 0.6. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5402,
		"nouns": [
			"_DRAGCOEFFICIENT",
			"drag",
			"coefficient"
		],
		"dOIndex": 314,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"_DRAGCOEFFICIENT",
			"coefficient"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.06666666666666667,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " We picked this value from the chart of drag coefficient for a smooth sphere versus the Reynolds number shown in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5403,
		"nouns": [
			"value",
			"chart",
			"drag",
			"coefficient",
			"sphere",
			"Reynolds",
			"number"
		],
		"dOIndex": 315,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"coefficient",
			"Reynolds"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.045454545454545456,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": "Chapter 6",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5404,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 316,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " . ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5405,
		"nouns": [],
		"dOIndex": 317,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " We simply eyeballed a value in the Reynolds number range from 1e4 to 1e5. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5406,
		"nouns": [
			"value",
			"Reynolds",
			"number",
			"range",
			"e",
			"e"
		],
		"dOIndex": 318,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Reynolds"
		]
	},
	{
		"txt": " You have a choice here of tuning the drag coefficient value to achieve some desired effect, or you can create a curve fit or lookup table to select a drag coefficient corresponding to the Reynolds number of the moving particle.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5407,
		"nouns": [
			"choice",
			"drag",
			"coefficient",
			"value",
			"effect",
			"curve",
			"lookup",
			"table",
			"drag",
			"coefficient",
			"Reynolds",
			"number",
			"particle"
		],
		"dOIndex": 319,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"coefficient",
			"Reynolds",
			"particle"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.024390243902439025,
			"words": [
				"drag",
				"fit",
				"desired",
				"drag"
			],
			"positive": [
				"fit",
				"desired"
			],
			"negative": [
				"drag",
				"drag"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5408,
		"nouns": [],
		"dOIndex": 320,
		"isQuote": false
	},
	{
		"txt": "Now that we have the magnitude of the drag force, we simply multiply that force by the unit drag vector to obtain the final drag force vector. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5409,
		"nouns": [
			"magnitude",
			"drag",
			"force",
			"force",
			"unit",
			"drag",
			"vector",
			"drag",
			"force",
			"vector"
		],
		"dOIndex": 321,
		"nouns2": [
			"magnitude"
		],
		"highfreq": {
			"drag": 3,
			"force": 3
		},
		"sentiment": {
			"score": -3,
			"comparative": -0.10714285714285714,
			"words": [
				"drag",
				"drag",
				"drag"
			],
			"positive": [],
			"negative": [
				"drag",
				"drag",
				"drag"
			]
		},
		"isQuote": false
	},
	{
		"txt": " This vector then gets aggregated in vForces .",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5410,
		"nouns": [
			"vector",
			"vForces"
		],
		"dOIndex": 322,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vForces"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5411,
		"nouns": [],
		"dOIndex": 323,
		"isQuote": false
	},
	{
		"txt": "We handle the wind force in a similar manner with a few differences in the details. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5412,
		"nouns": [
			"wind",
			"force",
			"manner",
			"differences",
			"details"
		],
		"dOIndex": 324,
		"nouns2": [
			"differences",
			"details"
		],
		"isQuote": false
	},
	{
		"txt": " First, since we know the unit wind force vector is in the positive x direction (i.e., it acts from left to right), we can simply set the x component of the wind force vector, vWind , to the magnitude of the wind force. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5413,
		"nouns": [
			"First",
			"unit",
			"wind",
			"force",
			"vector",
			"x",
			"direction",
			"e",
			"acts",
			"right",
			"x",
			"component",
			"wind",
			"force",
			"vector",
			"vWind",
			"magnitude",
			"wind",
			"force"
		],
		"dOIndex": 325,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"direction",
			"component",
			"magnitude"
		],
		"highfreq": {
			"wind": 3,
			"force": 3
		},
		"sentiment": {
			"score": 2,
			"comparative": 0.044444444444444446,
			"words": [
				"positive"
			],
			"positive": [
				"positive"
			],
			"negative": []
		}
	},
	{
		"txt": " We compute that wind force using the same formula we used for still air drag with the exception of using the wind speed instead of the particle's speed. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5414,
		"nouns": [
			"wind",
			"force",
			"formula",
			"air",
			"drag",
			"exception",
			"wind",
			"particle"
		],
		"dOIndex": 326,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"formula",
			"exception",
			"particle"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.03333333333333333,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " We used _WINDSPEED, a global define , to represent the wind speed, which we have set to 10 m/s (about 20 knots).",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5415,
		"nouns": [
			"_WINDSPEED",
			"wind",
			"m",
			"/",
			"knots"
		],
		"dOIndex": 327,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"_WINDSPEED"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5416,
		"nouns": [],
		"dOIndex": 328,
		"isQuote": false
	},
	{
		"txt": "Finally, the wind force is aggregated in vForces .",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5417,
		"nouns": [
			"wind",
			"force",
			"vForces"
		],
		"dOIndex": 329,
		"nouns2": [
			"Finally",
			"vForces"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5418,
		"nouns": [],
		"dOIndex": 330,
		"isQuote": false
	},
	{
		"txt": "At this stage the particles will fall under the influence of gravity, but not as fast as they would have without the drag force. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5419,
		"nouns": [
			"stage",
			"particles",
			"fall",
			"influence",
			"gravity",
			"drag",
			"force"
		],
		"dOIndex": 331,
		"nouns2": [
			"particles",
			"influence",
			"gravity"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.04,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		},
		"isQuote": false
	},
	{
		"txt": " And now they'll also drift to the right due to the wind ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5420,
		"nouns": [
			"ll",
			"drift",
			"right",
			"wind"
		],
		"dOIndex": 332,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5421,
		"nouns": [],
		"dOIndex": 333,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "force.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5422,
		"nouns": [
			"force"
		],
		"dOIndex": 334,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5423,
		"nouns": [],
		"dOIndex": 335,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5424,
		"nouns": [],
		"dOIndex": 336,
		"isQuote": false
	},
	{
		"txt": "Implementing Collisions",
		"why": "p",
		"tags": [
			"a",
			"h2",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5425,
		"nouns": [
			"Collisions"
		],
		"dOIndex": 337,
		"nouns2": [
			"Implementing",
			"Collisions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -1,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		},
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5426,
		"nouns": [],
		"dOIndex": 338,
		"isQuote": false
	},
	{
		"txt": "Adding external forces ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5427,
		"nouns": [
			"forces"
		],
		"dOIndex": 339,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Adding"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5428,
		"nouns": [],
		"dOIndex": 340,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "made the simulation a little more interesting. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5429,
		"nouns": [
			"simulation"
		],
		"dOIndex": 341,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.25,
			"words": [
				"interesting"
			],
			"positive": [
				"interesting"
			],
			"negative": []
		}
	},
	{
		"txt": " However, to really make it pop, we're going to add collisions. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5430,
		"nouns": [
			"pop",
			"re",
			"collisions"
		],
		"dOIndex": 342,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"However",
			"collisions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.15384615384615385,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		}
	},
	{
		"txt": " Specifically, we'll handle particle to ground collisions and particle to object collisions. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5431,
		"nouns": [
			"ll",
			"particle",
			"ground",
			"collisions",
			"particle",
			"object",
			"collisions"
		],
		"dOIndex": 343,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Specifically",
			"particle",
			"collisions"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.2857142857142857,
			"words": [
				"collisions",
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions",
				"collisions"
			]
		}
	},
	{
		"txt": " If you have not yet read ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5432,
		"nouns": [],
		"dOIndex": 344,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Chapter 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5433,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 345,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " , which covers collisions, you should because we'll implement principles covered in that chapter here in the example. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5434,
		"nouns": [
			"collisions",
			"ll",
			"principles",
			"chapter",
			"example"
		],
		"dOIndex": 346,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collisions",
			"principles",
			"chapter",
			"example"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.1,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		}
	},
	{
		"txt": " We'll implement enough collision handling in this example to allow particles to bounce off the ground and circular objects, and we'll come back to collision handling in more detail in ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5435,
		"nouns": [
			"ll",
			"collision",
			"example",
			"particles",
			"ground",
			"objects",
			"ll",
			"collision",
			"detail"
		],
		"dOIndex": 347,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"example",
			"particles",
			"objects"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.09375,
			"words": [
				"collision",
				"allow",
				"collision"
			],
			"positive": [
				"allow"
			],
			"negative": [
				"collision",
				"collision"
			]
		}
	},
	{
		"txt": "Chapter 10",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5436,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 348,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " . ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5437,
		"nouns": [],
		"dOIndex": 349,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " The material in this chapter should whet your appetite. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5438,
		"nouns": [
			"chapter",
			"whet",
			"appetite"
		],
		"dOIndex": 350,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"chapter",
			"appetite"
		]
	},
	{
		"txt": " We'll start with the easier case of particle to ground collisions.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5439,
		"nouns": [
			"ll",
			"case",
			"particle",
			"ground",
			"collisions"
		],
		"dOIndex": 351,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"collisions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.16666666666666666,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		}
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5440,
		"nouns": [],
		"dOIndex": 352,
		"isQuote": false
	},
	{
		"txt": "Particle to Ground Collisions",
		"why": "p",
		"tags": [
			"h3",
			"div",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5441,
		"nouns": [
			"Particle",
			"Ground",
			"Collisions"
		],
		"dOIndex": 353,
		"nouns2": [
			"Particle",
			"Ground",
			"Collisions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.5,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		},
		"isQuote": false
	},
	{
		"txt": "Essentially what we're aiming to achieve with ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5442,
		"nouns": [
			"re"
		],
		"dOIndex": 354,
		"nouns2": [
			"Essentially"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5443,
		"nouns": [],
		"dOIndex": 355,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5444,
		"nouns": [],
		"dOIndex": 356,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "particle to ground collision detection is to prevent the particles from passing through a ground plane specified at some y coordinate. ",
		"why": "split inside sentence",
		"tags": [
			"em",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5445,
		"nouns": [
			"particle",
			"ground",
			"collision",
			"detection",
			"particles",
			"ground",
			"plane",
			"y"
		],
		"dOIndex": 357,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"collision",
			"detection",
			"particles"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.13636363636363635,
			"words": [
				"prevent",
				"collision"
			],
			"positive": [],
			"negative": [
				"prevent",
				"collision"
			]
		}
	},
	{
		"txt": " Imagine a horizontal impenetrable surface that the particles cannot pass through. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5446,
		"nouns": [
			"surface",
			"particles"
		],
		"dOIndex": 358,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Imagine",
			"surface",
			"particles"
		]
	},
	{
		"txt": " There are several things we must do in order to detect whether a particle is indeed colliding with the ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5447,
		"nouns": [
			"things",
			"order",
			"particle"
		],
		"dOIndex": 359,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.047619047619047616,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": "ground plane. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5448,
		"nouns": [
			"ground",
			"plane"
		],
		"dOIndex": 360,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " If so, then we need to handle the collision, making the particles respond in a suitable manner.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5449,
		"nouns": [
			"collision",
			"particles",
			"manner"
		],
		"dOIndex": 361,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"particles"
		],
		"sentiment": {
			"score": 0,
			"comparative": 0,
			"words": [
				"suitable",
				"collision"
			],
			"positive": [
				"suitable"
			],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5450,
		"nouns": [],
		"dOIndex": 362,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5451,
		"nouns": [],
		"dOIndex": 363,
		"isQuote": false
	},
	{
		"txt": "The left side of ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5452,
		"nouns": [
			"side"
		],
		"dOIndex": 364,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5453,
		"nouns": [
			"Figure"
		],
		"dOIndex": 365,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " illustrates a collision scenario. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5454,
		"nouns": [
			"collision",
			"scenario"
		],
		"dOIndex": 366,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"scenario"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.3333333333333333,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " It's easy to determine whether or not a collision has taken place. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5455,
		"nouns": [
			"collision",
			"place"
		],
		"dOIndex": 367,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.07142857142857142,
			"words": [
				"collision",
				"easy"
			],
			"positive": [
				"easy"
			],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " Over a given simulation time step, a particle may have moved from some previous position (its position at the previous time step) to its current position. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5456,
		"nouns": [
			"simulation",
			"time",
			"step",
			"particle",
			"position",
			"position",
			"time",
			"step",
			"position"
		],
		"dOIndex": 368,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation",
			"particle",
			"position"
		],
		"highfreq": {
			"position": 3
		}
	},
	{
		"txt": " If this current position puts the centroid coordinate of the particle within one particle radius of the ground plane, then a collision might be occurring. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5457,
		"nouns": [
			"position",
			"centroid",
			"particle",
			"one",
			"particle",
			"radius",
			"ground",
			"plane",
			"collision"
		],
		"dOIndex": 369,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"position",
			"centroid",
			"particle",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07407407407407407,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " We say might because the other criteria we need to check in order to determine whether or not a collision is happening is whether or not the particle is moving toward the ground plane. ",
		"why": "split inside sentence",
		"tags": [
			"em",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5458,
		"nouns": [
			"criteria",
			"check",
			"order",
			"collision",
			"particle",
			"ground",
			"plane"
		],
		"dOIndex": 370,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"criteria",
			"collision",
			"particle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.05555555555555555,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " If the particle is moving toward the ground plane and it's within one radius of the ground plane, then a collision is occurring. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5459,
		"nouns": [
			"particle",
			"ground",
			"plane",
			"one",
			"radius",
			"ground",
			"plane",
			"collision"
		],
		"dOIndex": 371,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " It may also be the case that the particle has passed completely through the ground plane, in which case we assume a collision has occurred.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5460,
		"nouns": [
			"case",
			"particle",
			"ground",
			"plane",
			"case",
			"collision"
		],
		"dOIndex": 372,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07692307692307693,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5461,
		"nouns": [],
		"dOIndex": 373,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5462,
		"nouns": [],
		"dOIndex": 374,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5463,
		"nouns": [],
		"dOIndex": 375,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5464,
		"nouns": [],
		"dOIndex": 376,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5465,
		"nouns": [],
		"dOIndex": 377,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 5. Particle to ground collision",
		"why": "p",
		"tags": [
			"a",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5466,
		"nouns": [
			"Figure",
			"Particle",
			"ground",
			"collision"
		],
		"dOIndex": 378,
		"nouns2": [
			"Figure",
			"Particle",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.4,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		},
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5467,
		"nouns": [],
		"dOIndex": 379,
		"isQuote": false
	},
	{
		"txt": "To prevent such penetration of the ground plane, we need to do two things. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5468,
		"nouns": [
			"penetration",
			"ground",
			"plane",
			"two",
			"things"
		],
		"dOIndex": 380,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"penetration"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.06666666666666667,
			"words": [
				"prevent"
			],
			"positive": [],
			"negative": [
				"prevent"
			]
		}
	},
	{
		"txt": " First, we must reposition the particle so that it is just touching the ground plane, as shown on the right side of ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5469,
		"nouns": [
			"First",
			"particle",
			"ground",
			"plane",
			"right",
			"side"
		],
		"dOIndex": 381,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		]
	},
	{
		"txt": "Figure 8 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5470,
		"nouns": [
			"Figure"
		],
		"dOIndex": 382,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " . ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5471,
		"nouns": [],
		"dOIndex": 383,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " Second, we must apply some impact force resulting from the collision in order to force the particle to either stop moving down into the ground plane or to move away from the ground plane. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5472,
		"nouns": [
			"impact",
			"force",
			"collision",
			"order",
			"force",
			"particle",
			"stop",
			"ground",
			"plane",
			"move",
			"ground",
			"plane"
		],
		"dOIndex": 384,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Second",
			"collision",
			"particle"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.08333333333333333,
			"words": [
				"stop",
				"collision"
			],
			"positive": [],
			"negative": [
				"stop",
				"collision"
			]
		}
	},
	{
		"txt": " All these steps make up collision detection and response.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5473,
		"nouns": [
			"steps",
			"collision",
			"detection",
			"response"
		],
		"dOIndex": 385,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"detection",
			"response"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.2,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5474,
		"nouns": [],
		"dOIndex": 386,
		"isQuote": false
	},
	{
		"txt": "There are several changes and additions that we must make to the example code in order to implement particle to ground collision detection and response. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5475,
		"nouns": [
			"changes",
			"additions",
			"example",
			"code",
			"order",
			"particle",
			"ground",
			"collision",
			"detection",
			"response"
		],
		"dOIndex": 387,
		"nouns2": [
			"changes",
			"additions",
			"example",
			"particle",
			"collision",
			"detection",
			"response"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07692307692307693,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		},
		"isQuote": false
	},
	{
		"txt": " Let's begin with the Particle class.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5476,
		"nouns": [
			"Particle",
			"class"
		],
		"dOIndex": 388,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Particle"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5477,
		"nouns": [],
		"dOIndex": 389,
		"isQuote": false
	},
	{
		"txt": "We've added three new properties to Particle, as follows:",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5478,
		"nouns": [
			"ve",
			"three",
			"properties",
			"Particle"
		],
		"dOIndex": 390,
		"nouns2": [
			"properties",
			"Particle"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5479,
		"nouns": [],
		"dOIndex": 391,
		"isQuote": false
	},
	{
		"txt": "vPreviousPosition is used to store the particle's position at the previous time step that is, at time t dt . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5480,
		"nouns": [
			"vPreviousPosition",
			"store",
			"particle",
			"position",
			"time",
			"step",
			"time",
			"t",
			"dt"
		],
		"dOIndex": 392,
		"nouns2": [
			"vPreviousPosition",
			"particle",
			"position"
		],
		"isQuote": false
	},
	{
		"txt": " vImpactForces is used to aggregate all of the impact forces acting on a particle. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5481,
		"nouns": [
			"vImpactForces",
			"impact",
			"forces",
			"particle"
		],
		"dOIndex": 393,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"vImpactForces",
			"particle"
		]
	},
	{
		"txt": " You'll see later that it is possible for a particle to collide with more than one object at the same time. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5482,
		"nouns": [
			"ll",
			"particle",
			"collide",
			"one",
			"object",
			"time"
		],
		"dOIndex": 394,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"collide"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.043478260869565216,
			"words": [
				"collide"
			],
			"positive": [],
			"negative": [
				"collide"
			]
		}
	},
	{
		"txt": " bCollision is simply a flag that is used to indicate whether or not a collision has been detected with the particle at the current time step. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5483,
		"nouns": [
			"bCollision",
			"flag",
			"collision",
			"particle",
			"time",
			"step"
		],
		"dOIndex": 395,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"bCollision",
			"collision",
			"particle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07142857142857142,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " This is important because when a collision occurs, at that instant in time, we assume that the only forces acting on the particle are the impact forces; all of the other forces gravity, drag, and wind are ignored for that time instant. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5484,
		"nouns": [
			"collision",
			"instant",
			"time",
			"forces",
			"particle",
			"impact",
			"forces",
			"forces",
			"gravity",
			"drag",
			"wind",
			"time",
			"instant"
		],
		"dOIndex": 396,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"instant",
			"particle",
			"gravity"
		],
		"highfreq": {
			"that": 3,
			"forces": 3
		},
		"sentiment": {
			"score": -3,
			"comparative": -0.06818181818181818,
			"words": [
				"ignored",
				"drag",
				"collision",
				"important"
			],
			"positive": [
				"important"
			],
			"negative": [
				"ignored",
				"drag",
				"collision"
			]
		}
	},
	{
		"txt": " We use bCollision in the updated CalcLoads method:",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5485,
		"nouns": [
			"use",
			"bCollision",
			"CalcLoads",
			"method"
		],
		"dOIndex": 397,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"bCollision",
			"CalcLoads"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5486,
		"nouns": [],
		"dOIndex": 398,
		"isQuote": false
	},
	{
		"txt": "The only difference between this version of CalcLoads and the previous one is that we added the conditional if(bCollision) { ... ",
		"why": "split inside sentence",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5487,
		"nouns": [
			"difference",
			"version",
			"CalcLoads",
			"one",
			"bCollision"
		],
		"dOIndex": 399,
		"nouns2": [
			"difference",
			"version",
			"CalcLoads",
			"bCollision"
		],
		"isQuote": false
	},
	{
		"txt": " } else { ... ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5488,
		"nouns": [],
		"dOIndex": 400,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " } . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5489,
		"nouns": [],
		"dOIndex": 401,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " If bCollision is true, then we have a collision to deal with and the only forces that get aggregated are the impact forces. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5490,
		"nouns": [
			"bCollision",
			"collision",
			"forces",
			"impact",
			"forces"
		],
		"dOIndex": 402,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"bCollision",
			"collision"
		],
		"sentiment": {
			"score": 0,
			"comparative": 0,
			"words": [
				"collision",
				"true"
			],
			"positive": [
				"true"
			],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " If there is no collision, if bCollision is false, then the non impact forces are aggregated in the usual manner.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5491,
		"nouns": [
			"collision",
			"bCollision",
			"impact",
			"forces",
			"manner"
		],
		"dOIndex": 403,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"bCollision"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.19047619047619047,
			"words": [
				"false",
				"collision",
				"no"
			],
			"positive": [],
			"negative": [
				"false",
				"collision",
				"no"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5492,
		"nouns": [],
		"dOIndex": 404,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5493,
		"nouns": [],
		"dOIndex": 405,
		"isQuote": false
	},
	{
		"txt": "You may have caught that we are aggregating impact forces in this example. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5494,
		"nouns": [
			"impact",
			"forces",
			"example"
		],
		"dOIndex": 406,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example"
		]
	},
	{
		"txt": " This is an alternate approach to the one shown in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5495,
		"nouns": [
			"approach",
			"one"
		],
		"dOIndex": 407,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"approach"
		]
	},
	{
		"txt": "Chapter 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5496,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 408,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " . ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5497,
		"nouns": [],
		"dOIndex": 409,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " There we showed you how to calculate an impulse and change an object's velocity in response to a collision, using conservation of momentum. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5498,
		"nouns": [
			"impulse",
			"change",
			"object",
			"velocity",
			"response",
			"collision",
			"conservation",
			"momentum"
		],
		"dOIndex": 410,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"impulse",
			"velocity",
			"response",
			"collision",
			"conservation",
			"momentum"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " Well, we're still calculating impulses just like in ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5499,
		"nouns": [
			"re",
			"impulses"
		],
		"dOIndex": 411,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"impulses"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.2,
			"words": [
				"like"
			],
			"positive": [
				"like"
			],
			"negative": []
		}
	},
	{
		"txt": "Chapter 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5500,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 412,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " ; however, in this example, we're going to compute the impact force based on that impulse and apply that force to the colliding objects. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5501,
		"nouns": [
			"example",
			"re",
			"impact",
			"force",
			"impulse",
			"force",
			"objects"
		],
		"dOIndex": 413,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"impulse",
			"objects"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.038461538461538464,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": " We'll let the numerical integrator integrate that force to derive the colliding particle's new velocities. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5502,
		"nouns": [
			"ll",
			"integrator",
			"force",
			"particle",
			"velocities"
		],
		"dOIndex": 414,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integrator",
			"particle",
			"velocities"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.058823529411764705,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": " Either method works, and we'll show you an example of the former method later. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5503,
		"nouns": [
			"method",
			"works",
			"ll",
			"show",
			"example",
			"method"
		],
		"dOIndex": 415,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Either",
			"example"
		]
	},
	{
		"txt": " We're showing the latter method here just to illustrate some alternatives. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5504,
		"nouns": [
			"re",
			"latter",
			"method",
			"alternatives"
		],
		"dOIndex": 416,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"alternatives"
		]
	},
	{
		"txt": " The advantage of this latter method is that it is easy to compute impact forces due to multiple impacts and let the integrator take care of them all at once.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5505,
		"nouns": [
			"advantage",
			"latter",
			"method",
			"impact",
			"forces",
			"impacts",
			"integrator",
			"care"
		],
		"dOIndex": 417,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"advantage",
			"impacts",
			"integrator"
		],
		"sentiment": {
			"score": 5,
			"comparative": 0.16129032258064516,
			"words": [
				"care",
				"easy",
				"advantage"
			],
			"positive": [
				"care",
				"easy",
				"advantage"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5506,
		"nouns": [],
		"dOIndex": 418,
		"isQuote": false
	},
	{
		"txt": "Now, with these changes made to Particle, we need to add a line of code to UpdateSimulation, as shown here:",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5507,
		"nouns": [
			"changes",
			"Particle",
			"line",
			"code",
			"UpdateSimulation"
		],
		"dOIndex": 419,
		"nouns2": [
			"changes",
			"Particle",
			"UpdateSimulation"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5508,
		"nouns": [],
		"dOIndex": 420,
		"isQuote": false
	},
	{
		"txt": "The new line is Units[i].bCollision = CheckForCollisions(&(Units[i])); . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5509,
		"nouns": [
			"line",
			"Units[i]",
			"bCollision",
			"CheckForCollisions",
			"Units[i]"
		],
		"dOIndex": 421,
		"nouns2": [
			"Units[i]",
			"bCollision",
			"CheckForCollisions"
		],
		"isQuote": false
	},
	{
		"txt": " CheckForCollisions is a new function that takes the given unit, whose pointer is passed as an argument, and checks to see if it's colliding with anything in this case, the ground. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5510,
		"nouns": [
			"CheckForCollisions",
			"function",
			"unit",
			"pointer",
			"argument",
			"checks",
			"case",
			"ground"
		],
		"dOIndex": 422,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"CheckForCollisions",
			"function",
			"pointer",
			"argument"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.030303030303030304,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": " If a collision is detected, CheckForCollisions also computes the impact force and returns true to let us know a collision has occurred. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5511,
		"nouns": [
			"collision",
			"CheckForCollisions",
			"impact",
			"force",
			"returns",
			"collision"
		],
		"dOIndex": 423,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"CheckForCollisions",
			"returns"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08333333333333333,
			"words": [
				"collision",
				"true",
				"collision"
			],
			"positive": [
				"true"
			],
			"negative": [
				"collision",
				"collision"
			]
		}
	},
	{
		"txt": " CheckForCollisions is as follows:",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5512,
		"nouns": [
			"CheckForCollisions"
		],
		"dOIndex": 424,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"CheckForCollisions"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5513,
		"nouns": [],
		"dOIndex": 425,
		"isQuote": false
	},
	{
		"txt": "CheckForCollisions makes two checks: 1) it checks to see whether or not the particle is making contact or passing through the ground plane; and 2) it checks to make sure the particle is actually moving toward the ground plane. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5514,
		"nouns": [
			"CheckForCollisions",
			"two",
			"checks",
			"checks",
			"particle",
			"contact",
			"ground",
			"plane",
			"checks",
			"particle",
			"ground",
			"plane"
		],
		"dOIndex": 426,
		"nouns2": [
			"CheckForCollisions",
			"particle",
			"contact"
		],
		"highfreq": {
			"checks": 3
		},
		"isQuote": false
	},
	{
		"txt": " Keep in mind a particle could be in contact with the ground plane right after a collision has been handled with the particle moving away from the ground. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5515,
		"nouns": [
			"mind",
			"particle",
			"contact",
			"ground",
			"plane",
			"right",
			"collision",
			"particle",
			"ground"
		],
		"dOIndex": 427,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"contact",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.06666666666666667,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " In this case, we don't want to register another collision.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5516,
		"nouns": [
			"case",
			"t",
			"collision"
		],
		"dOIndex": 428,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.2727272727272727,
			"words": [
				"collision",
				"want"
			],
			"positive": [],
			"negative": [
				"collision",
				"want"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5517,
		"nouns": [],
		"dOIndex": 429,
		"isQuote": false
	},
	{
		"txt": "Let's consider the details of this function, starting with the local variables. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5518,
		"nouns": [
			"details",
			"function",
			"variables"
		],
		"dOIndex": 430,
		"nouns2": [
			"details",
			"function",
			"variables"
		],
		"isQuote": false
	},
	{
		"txt": " n is a vector that represents the unit normal vector pointing from the ground plane to the particle colliding with it. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5519,
		"nouns": [
			"n",
			"vector",
			"unit",
			"vector",
			"ground",
			"plane",
			"particle"
		],
		"dOIndex": 431,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.043478260869565216,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": " For ground collisions, in this example, the unit normal vector is always straight up since the ground plane is flat. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5520,
		"nouns": [
			"ground",
			"collisions",
			"example",
			"unit",
			"vector",
			"ground",
			"plane"
		],
		"dOIndex": 432,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collisions",
			"example"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.045454545454545456,
			"words": [
				"straight",
				"collisions"
			],
			"positive": [
				"straight"
			],
			"negative": [
				"collisions"
			]
		}
	},
	{
		"txt": " This means the unit normal vector will always have an x component of 0 and its y component will be 1.",
		"why": "split inside sentence",
		"tags": [
			"em",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5521,
		"nouns": [
			"unit",
			"vector",
			"x",
			"component",
			"y",
			"component"
		],
		"dOIndex": 433,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"component"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5522,
		"nouns": [],
		"dOIndex": 434,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5523,
		"nouns": [],
		"dOIndex": 435,
		"isQuote": false
	},
	{
		"txt": "The Vector vr is the relative velocity vector between the particle and the ground. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5524,
		"nouns": [
			"Vector",
			"vr",
			"velocity",
			"vector",
			"particle",
			"ground"
		],
		"dOIndex": 436,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Vector",
			"velocity",
			"particle"
		]
	},
	{
		"txt": " Since the ground isn't moving, the relative velocity",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5525,
		"nouns": [
			"ground",
			"isn",
			"t",
			"velocity"
		],
		"dOIndex": 437,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5526,
		"nouns": [],
		"dOIndex": 438,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " is simply the velocity of the particle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5527,
		"nouns": [
			"velocity",
			"particle"
		],
		"dOIndex": 439,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"particle"
		]
	},
	{
		"txt": " vrn is a scalar that's used to store the component of the relative velocity in the direction of the collision unit normal vector. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5528,
		"nouns": [
			"vrn",
			"store",
			"component",
			"velocity",
			"direction",
			"collision",
			"unit",
			"vector"
		],
		"dOIndex": 440,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"component",
			"velocity",
			"direction",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " We compute vrn by taking the dot product of the relative velocity with the unit normal vector. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5529,
		"nouns": [
			"vrn",
			"dot",
			"product",
			"velocity",
			"unit",
			"vector"
		],
		"dOIndex": 441,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"product",
			"velocity"
		]
	},
	{
		"txt": " J is a scalar that stores the impulse resulting from the collision. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5530,
		"nouns": [
			"J",
			"stores",
			"impulse",
			"collision"
		],
		"dOIndex": 442,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"impulse",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.14285714285714285,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " Fi is a vector that stores the impact force as derived from the impulse J . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5531,
		"nouns": [
			"Fi",
			"vector",
			"stores",
			"impact",
			"force",
			"impulse J"
		],
		"dOIndex": 443,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"impulse"
		]
	},
	{
		"txt": " Finally, hasCollision is a flag that's set based on whether or not a collision has been detected.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5532,
		"nouns": [
			"hasCollision",
			"flag",
			"collision"
		],
		"dOIndex": 444,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Finally",
			"hasCollision",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.1111111111111111,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5533,
		"nouns": [],
		"dOIndex": 445,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5534,
		"nouns": [],
		"dOIndex": 446,
		"isQuote": false
	},
	{
		"txt": "Now we'll look at the details within CheckForCollisions . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5535,
		"nouns": [
			"ll",
			"details",
			"CheckForCollisions"
		],
		"dOIndex": 447,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"details",
			"CheckForCollisions"
		]
	},
	{
		"txt": " The first task is to initialize the impact force vector, vImpactForces , to 0. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5536,
		"nouns": [
			"first",
			"task",
			"initialize",
			"impact",
			"force",
			"vector",
			"vImpactForces"
		],
		"dOIndex": 448,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"initialize",
			"vImpactForces"
		]
	},
	{
		"txt": " Next, we make the first collision check by determining if the y position of the particle is less than the ground plane height plus the particles radius. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5537,
		"nouns": [
			"first",
			"collision",
			"check",
			"y",
			"position",
			"particle",
			"ground",
			"plane",
			"height",
			"particles",
			"radius"
		],
		"dOIndex": 449,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"position",
			"particle",
			"particles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.06896551724137931,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " If it is, then we know a collision may have occurred. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5538,
		"nouns": [
			"collision"
		],
		"dOIndex": 450,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.15384615384615385,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " (_GROUND_PLANE represents the y coordinate of the ground plane, which we have set to 100.) If a collision may have occurred, then we make the next check to determine if the particle is moving toward the ground plane.",
		"why": "split inside sentence",
		"tags": [
			"em",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5539,
		"nouns": [
			"_GROUND_PLANE",
			"y",
			"ground",
			"plane",
			"collision",
			"check",
			"particle",
			"ground",
			"plane"
		],
		"dOIndex": 451,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"_GROUND_PLANE",
			"collision",
			"particle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.05128205128205128,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5540,
		"nouns": [],
		"dOIndex": 452,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5541,
		"nouns": [],
		"dOIndex": 453,
		"isQuote": false
	},
	{
		"txt": "To perform this second check, we compute the unit normal vector, relative velocity, and relative velocity component in the collision normal direct as described earlier. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5542,
		"nouns": [
			"second",
			"check",
			"unit",
			"vector",
			"velocity",
			"velocity",
			"component",
			"collision"
		],
		"dOIndex": 454,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"component",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07692307692307693,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " If the relative velocity in the normal direction is negative (i.e., if vrn < 0), then a collision has occurred. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5543,
		"nouns": [
			"velocity",
			"direction",
			"e",
			"vrn",
			"collision"
		],
		"dOIndex": 455,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"direction",
			"collision"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.18181818181818182,
			"words": [
				"collision",
				"negative"
			],
			"positive": [],
			"negative": [
				"collision",
				"negative"
			]
		}
	},
	{
		"txt": " If either of these checks is false, then a collision has not occurred and the function exits, returning false .",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5544,
		"nouns": [
			"checks",
			"collision",
			"function",
			"exits"
		],
		"dOIndex": 456,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"function"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.19047619047619047,
			"words": [
				"false",
				"collision",
				"false"
			],
			"positive": [],
			"negative": [
				"false",
				"collision",
				"false"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5545,
		"nouns": [],
		"dOIndex": 457,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5546,
		"nouns": [],
		"dOIndex": 458,
		"isQuote": false
	},
	{
		"txt": "The interesting stuff happens if the second check passes. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5547,
		"nouns": [
			"stuff",
			"second",
			"check"
		],
		"dOIndex": 459,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": 2,
			"comparative": 0.2,
			"words": [
				"interesting"
			],
			"positive": [
				"interesting"
			],
			"negative": []
		}
	},
	{
		"txt": " This is where we have to determine the impact force that will cause the particle to bounce off the ground plane. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5548,
		"nouns": [
			"impact",
			"force",
			"cause",
			"particle",
			"ground",
			"plane"
		],
		"dOIndex": 460,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle"
		]
	},
	{
		"txt": " Here's the specific code that computes the impact force:",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5549,
		"nouns": [
			"code",
			"impact",
			"force"
		],
		"dOIndex": 461,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5550,
		"nouns": [],
		"dOIndex": 462,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5551,
		"nouns": [],
		"dOIndex": 463,
		"isQuote": false
	},
	{
		"txt": "We compute the impulse using the formulas presented in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5552,
		"nouns": [
			"impulse",
			"formulas"
		],
		"dOIndex": 464,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"impulse",
			"formulas"
		]
	},
	{
		"txt": "Chapter 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5553,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 465,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " . ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5554,
		"nouns": [],
		"dOIndex": 466,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " J is a scalar equal to the negative of the relative velocity in the normal direction times the coefficient of restitution plus 1 times the particle mass. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5555,
		"nouns": [
			"J",
			"velocity",
			"direction",
			"times",
			"coefficient",
			"restitution",
			"times",
			"particle",
			"mass"
		],
		"dOIndex": 467,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"direction",
			"coefficient",
			"restitution",
			"particle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.06896551724137931,
			"words": [
				"negative"
			],
			"positive": [],
			"negative": [
				"negative"
			]
		}
	},
	{
		"txt": " Recall that the coefficient of restitution, _RESTITUTION , governs how elastic or inelastic the collision is, or in other words, how much energy is transferred back to the particle during the impact. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5556,
		"nouns": [
			"coefficient",
			"restitution",
			"_RESTITUTION",
			"inelastic",
			"collision",
			"words",
			"energy",
			"particle",
			"impact"
		],
		"dOIndex": 468,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Recall",
			"coefficient",
			"restitution",
			"_RESTITUTION",
			"inelastic",
			"collision",
			"particle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.058823529411764705,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		}
	},
	{
		"txt": " We have this value set to 0.6, but it is tunable depending on what effect you're trying to achieve. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5557,
		"nouns": [
			"value",
			"tunable",
			"effect",
			"re"
		],
		"dOIndex": 469,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"tunable"
		]
	},
	{
		"txt": " A value of 1 makes the particles very bouncy, while a value of, say, 0.1 makes them sort of stick to the ground upon impact.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5558,
		"nouns": [
			"value",
			"particles",
			"value",
			"sort",
			"ground",
			"impact"
		],
		"dOIndex": 470,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5559,
		"nouns": [],
		"dOIndex": 471,
		"isQuote": false
	},
	{
		"txt": "Now, to compute the impact force, Fi, that will act on the particle during the next time step, making it bounce off the ground, we set Fi equal to the collision normal vector. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5560,
		"nouns": [
			"impact",
			"force",
			"Fi",
			"act",
			"particle",
			"time",
			"step",
			"ground",
			"Fi",
			"collision",
			"vector"
		],
		"dOIndex": 472,
		"nouns2": [
			"particle",
			"collision"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.058823529411764705,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		},
		"isQuote": false
	},
	{
		"txt": " The magnitude of the impact force is equal to the impulse, J , divided by the time step in seconds. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5561,
		"nouns": [
			"magnitude",
			"impact",
			"force",
			"impulse",
			"J",
			"time",
			"step",
			"seconds"
		],
		"dOIndex": 473,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"magnitude",
			"impulse",
			"seconds"
		]
	},
	{
		"txt": " The line Fi *= J/_TIMESTEP; takes care of calculating the final impact force.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5562,
		"nouns": [
			"line",
			"Fi",
			"*= J",
			"/",
			"_TIMESTEP",
			"care",
			"impact",
			"force"
		],
		"dOIndex": 474,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"_TIMESTEP"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.14285714285714285,
			"words": [
				"care"
			],
			"positive": [
				"care"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5563,
		"nouns": [],
		"dOIndex": 475,
		"isQuote": false
	},
	{
		"txt": "To keep the particle from penetrating the ground, we reposition it so that it's just resting on the ground. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5564,
		"nouns": [
			"particle",
			"ground",
			"ground"
		],
		"dOIndex": 476,
		"nouns2": [
			"particle"
		],
		"isQuote": false
	},
	{
		"txt": " The y position is easy to compute as the ground plane elevation plus the radius of the particle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5565,
		"nouns": [
			"y",
			"position",
			"ground",
			"plane",
			"elevation",
			"radius",
			"particle"
		],
		"dOIndex": 477,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"position",
			"elevation",
			"particle"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.05,
			"words": [
				"easy"
			],
			"positive": [
				"easy"
			],
			"negative": []
		}
	},
	{
		"txt": " We compute the x position by linearly interpolating between the particle's previous position and its current position using the newly computed y position. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5566,
		"nouns": [
			"x",
			"position",
			"particle",
			"position",
			"position",
			"y",
			"position"
		],
		"dOIndex": 478,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"position",
			"particle"
		],
		"highfreq": {
			"position": 4
		}
	},
	{
		"txt": " This effectively backs up the particle along the line of action of its velocity to the point where it is just touching the ground plane.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5567,
		"nouns": [
			"backs",
			"particle",
			"line",
			"action",
			"velocity",
			"point",
			"ground",
			"plane"
		],
		"dOIndex": 479,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"velocity"
		],
		"sentiment": {
			"score": 3,
			"comparative": 0.11538461538461539,
			"words": [
				"backs",
				"effectively"
			],
			"positive": [
				"backs",
				"effectively"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5568,
		"nouns": [],
		"dOIndex": 480,
		"isQuote": false
	},
	{
		"txt": "When you run the simulation now, you'll see the particles fall, drifting a bit from left to right until they hit the ground plane. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5569,
		"nouns": [
			"simulation",
			"ll",
			"particles",
			"fall",
			"bit",
			"right",
			"ground",
			"plane"
		],
		"dOIndex": 481,
		"nouns2": [
			"simulation",
			"particles"
		],
		"isQuote": false
	},
	{
		"txt": " Once they hit, they'll bounce on the ground, eventually coming to rest. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5570,
		"nouns": [
			"ll",
			"ground",
			"rest"
		],
		"dOIndex": 482,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " Their specific behavior in this regard depends on what drag coefficient you use and what coefficient of restitution you use. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5571,
		"nouns": [
			"behavior",
			"regard",
			"drag",
			"coefficient",
			"use",
			"coefficient",
			"restitution",
			"use"
		],
		"dOIndex": 483,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"behavior",
			"coefficient",
			"restitution"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.045454545454545456,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " If you have wind applied, when the particles do come to rest, vertically, they should still drift to the right as though they are sliding on the ground ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5572,
		"nouns": [
			"wind",
			"particles",
			"rest",
			"drift",
			"right",
			"ground"
		],
		"dOIndex": 484,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5573,
		"nouns": [],
		"dOIndex": 485,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5574,
		"nouns": [],
		"dOIndex": 486,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5575,
		"nouns": [],
		"dOIndex": 487,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "plane.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5576,
		"nouns": [
			"plane"
		],
		"dOIndex": 488,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5577,
		"nouns": [],
		"dOIndex": 489,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5578,
		"nouns": [],
		"dOIndex": 490,
		"isQuote": false
	},
	{
		"txt": "Particle to Obstacle Collisions",
		"why": "p",
		"tags": [
			"a",
			"h3",
			"div",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5579,
		"nouns": [
			"Particle",
			"Obstacle",
			"Collisions"
		],
		"dOIndex": 491,
		"nouns2": [
			"Particle",
			"Obstacle",
			"Collisions"
		],
		"sentiment": {
			"score": -4,
			"comparative": -1,
			"words": [
				"collisions",
				"obstacle"
			],
			"positive": [],
			"negative": [
				"collisions",
				"obstacle"
			]
		},
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5580,
		"nouns": [],
		"dOIndex": 492,
		"isQuote": false
	},
	{
		"txt": "To make things ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5581,
		"nouns": [
			"things"
		],
		"dOIndex": 493,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5582,
		"nouns": [],
		"dOIndex": 494,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5583,
		"nouns": [],
		"dOIndex": 495,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "really interesting, we'll now add those circular obstacles you saw in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5584,
		"nouns": [
			"ll",
			"obstacles"
		],
		"dOIndex": 496,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"obstacles"
		],
		"sentiment": {
			"score": 0,
			"comparative": 0,
			"words": [
				"obstacles",
				"interesting"
			],
			"positive": [
				"interesting"
			],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": "Figure 8 1 through ",
		"why": "lastExUIWasLink",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5585,
		"nouns": [
			"Figure"
		],
		"dOIndex": 497,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5586,
		"nouns": [],
		"dOIndex": 498,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 4 . ",
		"why": "split inside sentence",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5587,
		"nouns": [
			"Figure"
		],
		"dOIndex": 499,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " The particles will be able to hit them and bounce off or even settle down into crevasses made by overlapping obstacles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5588,
		"nouns": [
			"particles",
			"crevasses",
			"obstacles"
		],
		"dOIndex": 500,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"crevasses",
			"obstacles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.08695652173913043,
			"words": [
				"obstacles"
			],
			"positive": [],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": " The obstacles are simply static particles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5589,
		"nouns": [
			"obstacles",
			"particles"
		],
		"dOIndex": 501,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"obstacles",
			"particles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.25,
			"words": [
				"obstacles"
			],
			"positive": [],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": " We'll define them as particles and initialize them but then skip them when integrating the equations of motion of the dynamic particles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5590,
		"nouns": [
			"ll",
			"particles",
			"initialize",
			"equations",
			"motion",
			"particles"
		],
		"dOIndex": 502,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles",
			"initialize",
			"equations"
		],
		"highfreq": {
			"them": 3
		}
	},
	{
		"txt": " Here's the declaration for the Obstacles array:",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5591,
		"nouns": [
			"declaration",
			"Obstacles",
			"array"
		],
		"dOIndex": 503,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"declaration",
			"Obstacles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.25,
			"words": [
				"obstacles"
			],
			"positive": [],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5592,
		"nouns": [],
		"dOIndex": 504,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5593,
		"nouns": [],
		"dOIndex": 505,
		"isQuote": false
	},
	{
		"txt": "Initializing the obstacles is a matter of assigning them positions and a common radius and a mass. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5594,
		"nouns": [
			"obstacles",
			"matter",
			"positions",
			"radius",
			"mass"
		],
		"dOIndex": 506,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Initializing",
			"obstacles",
			"positions"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.05555555555555555,
			"words": [
				"matter",
				"obstacles"
			],
			"positive": [
				"matter"
			],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": " The few lines of code shown next were added to the main program's Initialize function to randomly position obstacles in the lower, middle portion of the window above the ground plane. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5595,
		"nouns": [
			"lines",
			"code",
			"program",
			"Initialize",
			"function",
			"position",
			"obstacles",
			"middle",
			"portion",
			"window",
			"ground",
			"plane"
		],
		"dOIndex": 507,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"program",
			"Initialize",
			"function",
			"position",
			"obstacles",
			"portion"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.06060606060606061,
			"words": [
				"obstacles"
			],
			"positive": [],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": " ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5596,
		"nouns": [],
		"dOIndex": 508,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 1 through ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5597,
		"nouns": [
			"Figure"
		],
		"dOIndex": 509,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": "Figure 8 4",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5598,
		"nouns": [
			"Figure"
		],
		"dOIndex": 510,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " illustrate how they are distributed.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5599,
		"nouns": [],
		"dOIndex": 511,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5600,
		"nouns": [],
		"dOIndex": 512,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5601,
		"nouns": [],
		"dOIndex": 513,
		"isQuote": false
	},
	{
		"txt": "Drawing the obstacles is easy since they are Particle types with a Draw method that already draws circular shapes. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5602,
		"nouns": [
			"obstacles",
			"Particle",
			"types",
			"Draw",
			"method",
			"shapes"
		],
		"dOIndex": 514,
		"nouns2": [
			"Drawing",
			"obstacles",
			"Particle"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.05,
			"words": [
				"easy",
				"obstacles"
			],
			"positive": [
				"easy"
			],
			"negative": [
				"obstacles"
			]
		},
		"isQuote": false
	},
	{
		"txt": " We created DrawObstacles to iterate through the Obstacles array, calling the Draw method of each obstacle.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5603,
		"nouns": [
			"DrawObstacles",
			"iterate",
			"Obstacles",
			"array",
			"Draw",
			"method",
			"obstacle"
		],
		"dOIndex": 515,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"DrawObstacles",
			"iterate",
			"Obstacles",
			"obstacle"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.23529411764705882,
			"words": [
				"obstacle",
				"obstacles"
			],
			"positive": [],
			"negative": [
				"obstacle",
				"obstacles"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5604,
		"nouns": [],
		"dOIndex": 516,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5605,
		"nouns": [],
		"dOIndex": 517,
		"isQuote": false
	},
	{
		"txt": "DrawObstacles is then called from UpdateSimulation:",
		"why": "link",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5606,
		"nouns": [
			"DrawObstacles",
			"UpdateSimulation"
		],
		"dOIndex": 518,
		"nouns2": [
			"DrawObstacles",
			"UpdateSimulation"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5607,
		"nouns": [],
		"dOIndex": 519,
		"isQuote": false
	},
	{
		"txt": "The last bit of code we need to add to have fully functioning collisions with obstacles involves adding more collision detection and handling code to the CheckForCollisions function. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5608,
		"nouns": [
			"bit",
			"code",
			"collisions",
			"obstacles",
			"collision",
			"detection",
			"code",
			"CheckForCollisions",
			"function"
		],
		"dOIndex": 520,
		"nouns2": [
			"collisions",
			"obstacles",
			"collision",
			"detection",
			"CheckForCollisions",
			"function"
		],
		"sentiment": {
			"score": -6,
			"comparative": -0.20689655172413793,
			"words": [
				"collision",
				"obstacles",
				"collisions"
			],
			"positive": [],
			"negative": [
				"collision",
				"obstacles",
				"collisions"
			]
		},
		"isQuote": false
	},
	{
		"txt": " Before we look at CheckForCollisions , let's consider colliding circles in general to gain a better understanding of what the new code will do.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5609,
		"nouns": [
			"CheckForCollisions",
			"circles",
			"gain",
			"code"
		],
		"dOIndex": 521,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Before",
			"CheckForCollisions",
			"circles"
		],
		"sentiment": {
			"score": 3,
			"comparative": 0.12,
			"words": [
				"better",
				"gain",
				"colliding"
			],
			"positive": [
				"better",
				"gain"
			],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5610,
		"nouns": [],
		"dOIndex": 522,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5611,
		"nouns": [],
		"dOIndex": 523,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5612,
		"nouns": [],
		"dOIndex": 524,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 6 illustrates two circles colliding. ",
		"why": "split inside sentence",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5613,
		"nouns": [
			"Figure",
			"two",
			"circles"
		],
		"dOIndex": 525,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure",
			"circles"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.14285714285714285,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": " We aim to detect whether or not these circles are colliding by checking the distance between their centers. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5614,
		"nouns": [
			"aim",
			"circles",
			"distance",
			"centers"
		],
		"dOIndex": 526,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"circles",
			"distance",
			"centers"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.05,
			"words": [
				"colliding"
			],
			"positive": [],
			"negative": [
				"colliding"
			]
		}
	},
	{
		"txt": " If the distance between the two centers is greater than the sum of the radii of the circles, then the particles are not colliding. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5615,
		"nouns": [
			"distance",
			"two",
			"centers",
			"sum",
			"radii",
			"circles",
			"particles"
		],
		"dOIndex": 527,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"distance",
			"centers",
			"circles",
			"particles"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.15384615384615385,
			"words": [
				"colliding",
				"greater"
			],
			"positive": [
				"colliding",
				"greater"
			],
			"negative": []
		}
	},
	{
		"txt": " The topmost illustration in ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5616,
		"nouns": [
			"illustration"
		],
		"dOIndex": 528,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"illustration"
		]
	},
	{
		"txt": "Figure 8 6 shows the distance, d, between centers and the distance, s, between the edges of the circles; s",
		"why": "lastExUIWasLink",
		"tags": [
			"em",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5617,
		"nouns": [
			"Figure",
			"distance",
			"centers",
			"distance",
			"edges",
			"circles"
		],
		"dOIndex": 529,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure",
			"distance",
			"centers",
			"circles"
		]
	},
	{
		"txt": " is the gap between the two. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5618,
		"nouns": [
			"gap",
			"two"
		],
		"dOIndex": 530,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " Another way to think about this is that if s is positive, then there's no collision. ",
		"why": "split inside sentence",
		"tags": [
			"em",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5619,
		"nouns": [
			"way",
			"collision"
		],
		"dOIndex": 531,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Another",
			"collision"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.05555555555555555,
			"words": [
				"collision",
				"no",
				"positive"
			],
			"positive": [
				"positive"
			],
			"negative": [
				"collision",
				"no"
			]
		}
	},
	{
		"txt": " Referring to the middle illustration in ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5620,
		"nouns": [
			"middle",
			"illustration"
		],
		"dOIndex": 532,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Referring",
			"illustration"
		]
	},
	{
		"txt": "Figure 8 6, if s",
		"why": "lastExUIWasLink",
		"tags": [
			"em",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5621,
		"nouns": [
			"Figure"
		],
		"dOIndex": 533,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " is equal to 0, then the circles are in contact. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5622,
		"nouns": [
			"circles",
			"contact"
		],
		"dOIndex": 534,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"circles",
			"contact"
		]
	},
	{
		"txt": " If s is a negative number, as shown in the bottommost illustration, then the circles are penetrating.",
		"why": "split inside sentence",
		"tags": [
			"em",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5623,
		"nouns": [
			"number",
			"bottommost",
			"illustration",
			"circles"
		],
		"dOIndex": 535,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"bottommost",
			"illustration",
			"circles"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.1111111111111111,
			"words": [
				"negative"
			],
			"positive": [],
			"negative": [
				"negative"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5624,
		"nouns": [],
		"dOIndex": 536,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5625,
		"nouns": [],
		"dOIndex": 537,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5626,
		"nouns": [],
		"dOIndex": 538,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5627,
		"nouns": [],
		"dOIndex": 539,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5628,
		"nouns": [],
		"dOIndex": 540,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 6. Collision states",
		"why": "p",
		"tags": [
			"a",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5629,
		"nouns": [
			"Figure",
			"Collision",
			"states"
		],
		"dOIndex": 541,
		"nouns2": [
			"Figure",
			"Collision"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5630,
		"nouns": [],
		"dOIndex": 542,
		"isQuote": false
	},
	{
		"txt": "We'll apply these principles for detecting colliding circles to detecting collisions between our particles and obstacles since they are both circles. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5631,
		"nouns": [
			"ll",
			"principles",
			"circles",
			"collisions",
			"particles",
			"obstacles",
			"both",
			"circles"
		],
		"dOIndex": 543,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"principles",
			"circles",
			"collisions",
			"particles",
			"obstacles"
		],
		"sentiment": {
			"score": -5,
			"comparative": -0.22727272727272727,
			"words": [
				"obstacles",
				"collisions",
				"colliding"
			],
			"positive": [],
			"negative": [
				"obstacles",
				"collisions",
				"colliding"
			]
		}
	},
	{
		"txt": " ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5632,
		"nouns": [],
		"dOIndex": 544,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 7",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5633,
		"nouns": [
			"Figure"
		],
		"dOIndex": 545,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " illustrates how our particle to obstacle collisions might look.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5634,
		"nouns": [
			"particle",
			"obstacle",
			"collisions"
		],
		"dOIndex": 546,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"obstacle",
			"collisions"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.4,
			"words": [
				"collisions",
				"obstacle"
			],
			"positive": [],
			"negative": [
				"collisions",
				"obstacle"
			]
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5635,
		"nouns": [],
		"dOIndex": 547,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5636,
		"nouns": [],
		"dOIndex": 548,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5637,
		"nouns": [],
		"dOIndex": 549,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5638,
		"nouns": [],
		"dOIndex": 550,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5639,
		"nouns": [],
		"dOIndex": 551,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 7. Particle to obstacle collision",
		"why": "p",
		"tags": [
			"a",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5640,
		"nouns": [
			"Figure",
			"Particle",
			"obstacle",
			"collision"
		],
		"dOIndex": 552,
		"nouns2": [
			"Figure",
			"Particle",
			"obstacle",
			"collision"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.8,
			"words": [
				"collision",
				"obstacle"
			],
			"positive": [],
			"negative": [
				"collision",
				"obstacle"
			]
		},
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5641,
		"nouns": [],
		"dOIndex": 553,
		"isQuote": false
	},
	{
		"txt": "We'll calculate s for each particle against each obstacle to determine contact or penetration. ",
		"why": "split inside sentence",
		"tags": [
			"em",
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5642,
		"nouns": [
			"ll",
			"particle",
			"obstacle",
			"contact",
			"penetration"
		],
		"dOIndex": 554,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"obstacle",
			"contact",
			"penetration"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.13333333333333333,
			"words": [
				"obstacle"
			],
			"positive": [],
			"negative": [
				"obstacle"
			]
		}
	},
	{
		"txt": " If we find either, then we'll perform the relative velocity check in the same manner we did for particle to ground collisions to see if the particle is moving toward the obstacle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5643,
		"nouns": [
			"ll",
			"velocity",
			"check",
			"manner",
			"particle",
			"ground",
			"collisions",
			"particle",
			"obstacle"
		],
		"dOIndex": 555,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"particle",
			"collisions",
			"obstacle"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.11764705882352941,
			"words": [
				"obstacle",
				"collisions"
			],
			"positive": [],
			"negative": [
				"obstacle",
				"collisions"
			]
		}
	},
	{
		"txt": " If it is, then we have a collision and we'll back up the particle along the collision normal vector line of action, which is simply the line connecting the centers of the particle and the obstacle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5644,
		"nouns": [
			"collision",
			"ll",
			"particle",
			"collision",
			"vector",
			"line",
			"action",
			"line",
			"centers",
			"particle",
			"obstacle"
		],
		"dOIndex": 556,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"particle",
			"centers",
			"obstacle"
		],
		"sentiment": {
			"score": -6,
			"comparative": -0.15789473684210525,
			"words": [
				"obstacle",
				"collision",
				"collision"
			],
			"positive": [],
			"negative": [
				"obstacle",
				"collision",
				"collision"
			]
		}
	},
	{
		"txt": " We'll also compute the impact force like we did earlier and let the integrator take care of the rest.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5645,
		"nouns": [
			"ll",
			"impact",
			"force",
			"integrator",
			"care",
			"rest"
		],
		"dOIndex": 557,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integrator"
		],
		"sentiment": {
			"score": 4,
			"comparative": 0.2,
			"words": [
				"care",
				"like"
			],
			"positive": [
				"care",
				"like"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5646,
		"nouns": [],
		"dOIndex": 558,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5647,
		"nouns": [],
		"dOIndex": 559,
		"isQuote": false
	},
	{
		"txt": "OK, now let's look at the new code in CheckForCollisions:",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5648,
		"nouns": [
			"code",
			"CheckForCollisions"
		],
		"dOIndex": 560,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"CheckForCollisions"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5649,
		"nouns": [],
		"dOIndex": 561,
		"isQuote": false
	},
	{
		"txt": "The new code is nearly the same as the code that checks for and handles particle to ground collisions. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5650,
		"nouns": [
			"code",
			"code",
			"checks",
			"particle",
			"ground",
			"collisions"
		],
		"dOIndex": 562,
		"nouns2": [
			"particle",
			"collisions"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.1,
			"words": [
				"collisions"
			],
			"positive": [],
			"negative": [
				"collisions"
			]
		},
		"isQuote": false
	},
	{
		"txt": " The only major differences are in how we compute the distance between the particle and the obstacle and how we adjust the colliding particle's position to prevent it from penetrating an obstacle, since the unit normal vector may not be straight up as it was before. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5651,
		"nouns": [
			"differences",
			"distance",
			"particle",
			"obstacle",
			"particle",
			"position",
			"obstacle",
			"unit",
			"vector"
		],
		"dOIndex": 563,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"differences",
			"distance",
			"particle",
			"obstacle",
			"position"
		],
		"sentiment": {
			"score": -5,
			"comparative": -0.10416666666666667,
			"words": [
				"straight",
				"obstacle",
				"prevent",
				"colliding",
				"obstacle"
			],
			"positive": [
				"straight"
			],
			"negative": [
				"obstacle",
				"prevent",
				"colliding",
				"obstacle"
			]
		}
	},
	{
		"txt": " The rest of the code is the same, so let's focus on the differences.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5652,
		"nouns": [
			"rest",
			"code",
			"focus",
			"differences"
		],
		"dOIndex": 564,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"differences"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"a",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5653,
		"nouns": [],
		"dOIndex": 565,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5654,
		"nouns": [],
		"dOIndex": 566,
		"isQuote": false
	},
	{
		"txt": "As explained earlier and illustrated in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5655,
		"nouns": [],
		"dOIndex": 567,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Figure 8 6, we need to compute the separation, s",
		"why": "lastExUIWasLink",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5656,
		"nouns": [
			"Figure",
			"separation"
		],
		"dOIndex": 568,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure",
			"separation"
		]
	},
	{
		"txt": " , between the particle and the obstacle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5657,
		"nouns": [
			"particle",
			"obstacle"
		],
		"dOIndex": 569,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"obstacle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.2222222222222222,
			"words": [
				"obstacle"
			],
			"positive": [],
			"negative": [
				"obstacle"
			]
		}
	},
	{
		"txt": " So to get s, we declare a variable r and equate it to the sum of radii of the particle and the obstacle against which we're checking for a collision. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5658,
		"nouns": [
			"r",
			"sum",
			"radii",
			"particle",
			"obstacle",
			"re",
			"collision"
		],
		"dOIndex": 570,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particle",
			"obstacle",
			"collision"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.125,
			"words": [
				"collision",
				"obstacle"
			],
			"positive": [],
			"negative": [
				"collision",
				"obstacle"
			]
		}
	},
	{
		"txt": " We define d, a Vector , as the difference between the positions of the particle and obstacle. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5659,
		"nouns": [
			"Vector",
			"difference",
			"positions",
			"particle",
			"obstacle"
		],
		"dOIndex": 571,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Vector",
			"difference",
			"positions",
			"particle",
			"obstacle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.10526315789473684,
			"words": [
				"obstacle"
			],
			"positive": [],
			"negative": [
				"obstacle"
			]
		}
	},
	{
		"txt": " The magnitude of d minus r yields s .",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5660,
		"nouns": [
			"magnitude",
			"r",
			"yields"
		],
		"dOIndex": 572,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"magnitude"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5661,
		"nouns": [],
		"dOIndex": 573,
		"isQuote": false
	},
	{
		"txt": "If s is less than 0, then we make the relative velocity check. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5662,
		"nouns": [
			"velocity",
			"check"
		],
		"dOIndex": 574,
		"nouns2": [
			"velocity"
		],
		"isQuote": false
	},
	{
		"txt": " Now, in this case the collision normal vector is along the line connecting the centers of the two circles representing the particle and the obstacle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5663,
		"nouns": [
			"case",
			"collision",
			"vector",
			"line",
			"centers",
			"two",
			"circles",
			"particle",
			"obstacle"
		],
		"dOIndex": 575,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"collision",
			"centers",
			"circles",
			"particle",
			"obstacle"
		],
		"sentiment": {
			"score": -4,
			"comparative": -0.14814814814814814,
			"words": [
				"obstacle",
				"collision"
			],
			"positive": [],
			"negative": [
				"obstacle",
				"collision"
			]
		}
	},
	{
		"txt": " Well, that's just the vector d we already calculated. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5664,
		"nouns": [
			"vector"
		],
		"dOIndex": 576,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " To get the unit normal vector, we simply normalize d . ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5665,
		"nouns": [
			"unit",
			"vector"
		],
		"dOIndex": 577,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": " The relative velocity vector is simply the difference in velocities of the particle and the obstacle. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5666,
		"nouns": [
			"velocity",
			"vector",
			"difference",
			"velocities",
			"particle",
			"obstacle"
		],
		"dOIndex": 578,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"difference",
			"velocities",
			"particle",
			"obstacle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.1111111111111111,
			"words": [
				"obstacle"
			],
			"positive": [],
			"negative": [
				"obstacle"
			]
		}
	},
	{
		"txt": " Since the obstacles are static, the relative velocity is just the particle's velocity. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5667,
		"nouns": [
			"obstacles",
			"velocity",
			"particle",
			"velocity"
		],
		"dOIndex": 579,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"obstacles",
			"velocity",
			"particle"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.13333333333333333,
			"words": [
				"obstacles"
			],
			"positive": [],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": " But we calculated the relative velocity by taking the vector difference vr = p >vVelocity – Obstacles[i].vVelocity , because in a more advanced scenario, you might have moving obstacles.",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5668,
		"nouns": [
			"velocity",
			"vector",
			"difference",
			"vr",
			"p",
			">vVelocity",
			"–",
			"Obstacles[i]",
			"vVelocity",
			"scenario",
			"obstacles"
		],
		"dOIndex": 580,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"difference",
			">vVelocity",
			"Obstacles[i]",
			"vVelocity",
			"scenario",
			"obstacles"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.03333333333333333,
			"words": [
				"obstacles",
				"advanced"
			],
			"positive": [
				"advanced"
			],
			"negative": [
				"obstacles"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5669,
		"nouns": [],
		"dOIndex": 581,
		"isQuote": false
	},
	{
		"txt": "Taking the dot product of the relative velocity vector, vr , with the unit normal vector yields the relative velocity in the collision normal direction. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5670,
		"nouns": [
			"dot",
			"product",
			"velocity",
			"vector",
			"vr",
			"unit",
			"vector",
			"yields",
			"velocity",
			"collision",
			"direction"
		],
		"dOIndex": 582,
		"nouns2": [
			"Taking",
			"product",
			"velocity",
			"collision",
			"direction"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.07692307692307693,
			"words": [
				"collision"
			],
			"positive": [],
			"negative": [
				"collision"
			]
		},
		"isQuote": false
	},
	{
		"txt": " If that relative velocity is less than 0, then the particle and the object are colliding and the code goes on to calculate the impact force in a manner similar to that described earlier for the particle to ground collisions. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5671,
		"nouns": [
			"velocity",
			"particle",
			"object",
			"code",
			"impact",
			"force",
			"manner",
			"particle",
			"ground",
			"collisions"
		],
		"dOIndex": 583,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"velocity",
			"particle",
			"collisions"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.07142857142857142,
			"words": [
				"collisions",
				"colliding"
			],
			"positive": [],
			"negative": [
				"collisions",
				"colliding"
			]
		}
	},
	{
		"txt": " The only difference here is that both the particle's and object's masses appear in the impulse formula. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5672,
		"nouns": [
			"difference",
			"both",
			"particle",
			"object",
			"masses",
			"impulse",
			"formula"
		],
		"dOIndex": 584,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"difference",
			"particle",
			"impulse",
			"formula"
		]
	},
	{
		"txt": " Earlier we assumed the ground was infinitely massive relative to the particle's mass, so the 1/m term for the ground went to 0, essentially dropping out of the equation. ",
		"why": "split inside sentence",
		"tags": [
			"code",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5673,
		"nouns": [
			"ground",
			"particle",
			"mass",
			"/",
			"m",
			"term",
			"ground",
			"equation"
		],
		"dOIndex": 585,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Earlier",
			"particle",
			"equation"
		]
	},
	{
		"txt": " Refer back to ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5674,
		"nouns": [],
		"dOIndex": 586,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Chapter 5",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5675,
		"nouns": [
			"Chapter"
		],
		"dOIndex": 587,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Chapter"
		]
	},
	{
		"txt": " to recall the impulse formulas.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5676,
		"nouns": [
			"impulse",
			"formulas"
		],
		"dOIndex": 588,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"impulse",
			"formulas"
		]
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5677,
		"nouns": [],
		"dOIndex": 589,
		"isQuote": false
	},
	{
		"txt": "Once the impact force is calculated, the code backs up the particle by a distance equal to s, the penetration, along the line of action of the collision normal vector, giving us what we desire (as shown in ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5678,
		"nouns": [
			"impact",
			"force",
			"code",
			"backs",
			"particle",
			"distance",
			"penetration",
			"line",
			"action",
			"collision",
			"vector",
			"desire"
		],
		"dOIndex": 590,
		"nouns2": [
			"particle",
			"distance",
			"penetration",
			"collision"
		],
		"sentiment": {
			"score": 0,
			"comparative": 0,
			"words": [
				"desire",
				"collision",
				"backs"
			],
			"positive": [
				"desire",
				"backs"
			],
			"negative": [
				"collision"
			]
		},
		"isQuote": false
	},
	{
		"txt": "Figure 8 7",
		"why": "lastExUIWasLink",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5679,
		"nouns": [
			"Figure"
		],
		"dOIndex": 591,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Figure"
		]
	},
	{
		"txt": " ).",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5680,
		"nouns": [],
		"dOIndex": 592,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5681,
		"nouns": [],
		"dOIndex": 593,
		"isQuote": false
	},
	{
		"txt": "Now, when you run this simulation you'll see the particles falling down, bouncing off the obstacles or flowing around them depending on the value you're using for coefficient of restitution, ultimately bouncing and coming to rest on the ground plane. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5682,
		"nouns": [
			"simulation",
			"ll",
			"particles",
			"obstacles",
			"value",
			"re",
			"coefficient",
			"restitution",
			"rest",
			"ground",
			"plane"
		],
		"dOIndex": 594,
		"nouns2": [
			"simulation",
			"particles",
			"obstacles",
			"coefficient",
			"restitution"
		],
		"sentiment": {
			"score": -3,
			"comparative": -0.07317073170731707,
			"words": [
				"obstacles",
				"falling"
			],
			"positive": [],
			"negative": [
				"obstacles",
				"falling"
			]
		},
		"isQuote": false
	},
	{
		"txt": " If you have a wind speed greater than 0, then the particles will still drift along the ground plane from left to ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5683,
		"nouns": [
			"wind",
			"particles",
			"drift",
			"ground",
			"plane"
		],
		"dOIndex": 595,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles"
		],
		"sentiment": {
			"score": 3,
			"comparative": 0.125,
			"words": [
				"greater"
			],
			"positive": [
				"greater"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5684,
		"nouns": [],
		"dOIndex": 596,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5685,
		"nouns": [],
		"dOIndex": 597,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5686,
		"nouns": [],
		"dOIndex": 598,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5687,
		"nouns": [],
		"dOIndex": 599,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "right.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5688,
		"nouns": [
			"right"
		],
		"dOIndex": 600,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "br tag like",
		"tags": [
			"a",
			"p",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5689,
		"nouns": [],
		"dOIndex": 601,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5690,
		"nouns": [],
		"dOIndex": 602,
		"isQuote": false
	},
	{
		"txt": "Tuning",
		"why": "p",
		"tags": [
			"a",
			"h2",
			"div",
			"div",
			"div",
			"div",
			"section"
		],
		"sentenceIndex": 5691,
		"nouns": [],
		"dOIndex": 603,
		"nouns2": [
			"Tuning"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5692,
		"nouns": [],
		"dOIndex": 604,
		"isQuote": false,
		"ignoreDOBcNoQuotes": true,
		"nounsProcAll": []
	},
	{
		"txt": "Tuning is an ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5693,
		"nouns": [],
		"dOIndex": 605,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [],
		"nouns2": [
			"Tuning"
		]
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5694,
		"nouns": [],
		"dOIndex": 606,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": []
	},
	{
		"txt": "important part of developing any simulator. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5695,
		"nouns": [
			"part",
			"simulator"
		],
		"dOIndex": 607,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [
			"part",
			"simulator"
		],
		"nouns2": [
			"simulator"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.2857142857142857,
			"words": [
				"important"
			],
			"positive": [
				"important"
			],
			"negative": []
		}
	},
	{
		"txt": " Tuning means different things to different people. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5696,
		"nouns": [
			"things",
			"people"
		],
		"dOIndex": 608,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [
			"things",
			"people"
		],
		"nouns2": [
			"Tuning"
		]
	},
	{
		"txt": " For some, tuning is adjusting formulas and coefficients to make your simulation match some specific ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5697,
		"nouns": [
			"formulas",
			"coefficients",
			"simulation"
		],
		"dOIndex": 609,
		"ignoreDOBcNoQuotes": false,
		"isQuote": false,
		"nounsProcAll": [
			"formulas",
			"coefficients",
			"simulation"
		],
		"sfxfx": [],
		"nouns2": [
			"formulas",
			"coefficients",
			"simulation"
		]
	},
	{
		"txt": " \"right answer,\" ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5698,
		"isQuote": true,
		"nouns": [
			"right",
			"answer"
		],
		"dOIndex": 610,
		"nounsProcAll": [
			"right",
			"answer"
		],
		"sfxfx": [],
		"gspkNameUnknown": "formulas"
	},
	{
		"txt": " while to others tuning is adjusting parameters to make the simulation look and behave how you want it to, whether or not it's technically the right answer. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5699,
		"nouns": [
			"others",
			"parameters",
			"simulation",
			"right",
			"answer"
		],
		"dOIndex": 611,
		"isQuote": false,
		"ignoreDOBcNoQuotes": false,
		"nounsProcAll": [
			"others",
			"parameters",
			"simulation",
			"right",
			"answer"
		],
		"sfxfx": [],
		"nouns2": [
			"parameters",
			"simulation"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.034482758620689655,
			"words": [
				"want"
			],
			"positive": [
				"want"
			],
			"negative": []
		}
	},
	{
		"txt": " After all, the right answer for a game is that it's fun and robust. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5700,
		"nouns": [
			"right",
			"answer",
			"game",
			"fun"
		],
		"dOIndex": 612,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [
			"right",
			"answer",
			"game",
			"fun"
		],
		"sentiment": {
			"score": 6,
			"comparative": 0.375,
			"words": [
				"robust",
				"fun"
			],
			"positive": [
				"robust",
				"fun"
			],
			"negative": []
		}
	},
	{
		"txt": " Speaking of robustness, other folks view tuning in the sense of adjusting parameters to make the simulation stable. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5701,
		"nouns": [
			"robustness",
			"folks",
			"view",
			"sense",
			"parameters",
			"simulation"
		],
		"dOIndex": 613,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [
			"robustness",
			"folks",
			"view",
			"sense",
			"parameters",
			"simulation"
		],
		"nouns2": [
			"Speaking",
			"robustness",
			"parameters",
			"simulation"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.1,
			"words": [
				"stable"
			],
			"positive": [
				"stable"
			],
			"negative": []
		}
	},
	{
		"txt": " In reality, this is all tuning and you should think of it as a necessary part of developing your simulation. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5702,
		"nouns": [
			"reality",
			"part",
			"simulation"
		],
		"dOIndex": 614,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [
			"reality",
			"part",
			"simulation"
		],
		"nouns2": [
			"reality",
			"simulation"
		]
	},
	{
		"txt": " It's the process by which you tweak, nudge, and adjust things to make the simulation do what you want it to do.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5703,
		"nouns": [
			"process",
			"tweak",
			"things",
			"simulation"
		],
		"dOIndex": 615,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nounsProcAll": [
			"process",
			"tweak",
			"things",
			"simulation"
		],
		"nouns2": [
			"process",
			"simulation"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.043478260869565216,
			"words": [
				"want"
			],
			"positive": [
				"want"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5704,
		"nouns": [],
		"dOIndex": 616,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5705,
		"nouns": [],
		"dOIndex": 617,
		"isQuote": false
	},
	{
		"txt": "For example, you can use this same example simulation to model very springy rubber balls. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5706,
		"nouns": [
			"example",
			"use",
			"example",
			"simulation",
			"model",
			"springy",
			"rubber",
			"balls"
		],
		"dOIndex": 618,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"simulation",
			"springy"
		]
	},
	{
		"txt": " To achieve this, you'll probably adjust the coefficient of restitution toward a value approaching 1 and perhaps lower the drag coefficient. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5707,
		"nouns": [
			"ll",
			"coefficient",
			"restitution",
			"value",
			"drag",
			"coefficient"
		],
		"dOIndex": 619,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"coefficient",
			"restitution"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.043478260869565216,
			"words": [
				"drag"
			],
			"positive": [],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " The particles will bounce all over the place with a lot of energy. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5708,
		"nouns": [
			"particles",
			"place",
			"lot",
			"energy"
		],
		"dOIndex": 620,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"particles"
		]
	},
	{
		"txt": " If, on the other hand, you want to model something along the lines of mud, then you'll lower the coefficient of restitution and increase the drag coefficient. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5709,
		"nouns": [
			"hand",
			"model",
			"lines",
			"mud",
			"ll",
			"coefficient",
			"restitution",
			"increase",
			"drag",
			"coefficient"
		],
		"dOIndex": 621,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"coefficient",
			"restitution",
			"increase"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.034482758620689655,
			"words": [
				"drag",
				"increase",
				"want"
			],
			"positive": [
				"increase",
				"want"
			],
			"negative": [
				"drag"
			]
		}
	},
	{
		"txt": " There is no right or wrong combination of coefficient of restitution or drag coefficient to use, so long as you are pleased with the results.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5710,
		"nouns": [
			"right",
			"combination",
			"coefficient",
			"restitution",
			"drag",
			"coefficient",
			"use",
			"results"
		],
		"dOIndex": 622,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"combination",
			"coefficient",
			"restitution",
			"results"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.038461538461538464,
			"words": [
				"pleased",
				"drag",
				"wrong",
				"no"
			],
			"positive": [
				"pleased"
			],
			"negative": [
				"drag",
				"wrong",
				"no"
			]
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5711,
		"nouns": [],
		"dOIndex": 623,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5712,
		"nouns": [],
		"dOIndex": 624,
		"isQuote": false
	},
	{
		"txt": "Another aspect you might tune is the number of simulation frames per rendering frame. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5713,
		"nouns": [
			"aspect",
			"tune",
			"number",
			"simulation",
			"frames",
			"frame"
		],
		"dOIndex": 625,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"Another",
			"simulation"
		]
	},
	{
		"txt": " You may find the simulation calculations take so long that your resulting animations are too jerky because you aren't updating the display enough. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5714,
		"nouns": [
			"simulation",
			"calculations",
			"animations",
			"aren",
			"t",
			"display"
		],
		"dOIndex": 626,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation",
			"calculations",
			"animations",
			"display"
		]
	},
	{
		"txt": " The converse may be true in other cases. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5715,
		"nouns": [
			"converse",
			"cases"
		],
		"dOIndex": 627,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"converse"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.2,
			"words": [
				"true"
			],
			"positive": [
				"true"
			],
			"negative": []
		}
	},
	{
		"txt": " An important parameter that plays into this is the time step size you take at each simulation iteration. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5716,
		"nouns": [
			"parameter",
			"time",
			"step",
			"size",
			"simulation",
			"iteration"
		],
		"dOIndex": 628,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"parameter",
			"simulation",
			"iteration"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.1,
			"words": [
				"important"
			],
			"positive": [
				"important"
			],
			"negative": []
		}
	},
	{
		"txt": " If the step size is too small, you'll perform a lot of simulation steps, slowing the animation down. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5717,
		"nouns": [
			"step",
			"size",
			"ll",
			"lot",
			"simulation",
			"steps",
			"animation"
		],
		"dOIndex": 629,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation",
			"animation"
		]
	},
	{
		"txt": " On the other hand, a small time step can keep the simulation numerically stable. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5718,
		"nouns": [
			"hand",
			"time",
			"step",
			"simulation"
		],
		"dOIndex": 630,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.125,
			"words": [
				"stable"
			],
			"positive": [
				"stable"
			],
			"negative": []
		}
	},
	{
		"txt": " Your chosen integrator plays a huge role here.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5719,
		"nouns": [
			"integrator",
			"role"
		],
		"dOIndex": 631,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"integrator"
		],
		"sentiment": {
			"score": 1,
			"comparative": 0.1111111111111111,
			"words": [
				"huge"
			],
			"positive": [
				"huge"
			],
			"negative": []
		}
	},
	{
		"txt": "",
		"why": "p",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5720,
		"nouns": [],
		"dOIndex": 632,
		"isQuote": false
	},
	{
		"txt": "",
		"why": "link",
		"tags": [],
		"sentenceIndex": 5721,
		"nouns": [],
		"dOIndex": 633,
		"isQuote": false
	},
	{
		"txt": "If you make your time step too large, the simulation may just blow up and not work. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5722,
		"nouns": [
			"time",
			"step",
			"simulation",
			"blow",
			"work"
		],
		"dOIndex": 634,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"simulation"
		]
	},
	{
		"txt": " It will be numerically unstable. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5723,
		"nouns": [],
		"dOIndex": 635,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"sentiment": {
			"score": -2,
			"comparative": -0.2857142857142857,
			"words": [
				"unstable"
			],
			"positive": [],
			"negative": [
				"unstable"
			]
		}
	},
	{
		"txt": " Even if it doesn't blow up, you might see weird results. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5724,
		"nouns": [
			"doesn",
			"t",
			"blow",
			"results"
		],
		"dOIndex": 636,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"results"
		],
		"sentiment": {
			"score": -2,
			"comparative": -0.15384615384615385,
			"words": [
				"weird"
			],
			"positive": [],
			"negative": [
				"weird"
			]
		}
	},
	{
		"txt": " For example, if the time step in the example simulation discussed in this chapter is too large, then particles may completely step over obstacles in a single time step, missing the collision that would otherwise have happened. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5725,
		"nouns": [
			"example",
			"time",
			"step",
			"example",
			"simulation",
			"chapter",
			"particles",
			"step",
			"obstacles",
			"time",
			"step",
			"collision"
		],
		"dOIndex": 637,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false,
		"nouns2": [
			"example",
			"simulation",
			"chapter",
			"particles",
			"obstacles",
			"collision"
		],
		"highfreq": {
			"step": 3
		},
		"sentiment": {
			"score": -6,
			"comparative": -0.15384615384615385,
			"words": [
				"collision",
				"missing",
				"obstacles"
			],
			"positive": [],
			"negative": [
				"collision",
				"missing",
				"obstacles"
			]
		}
	},
	{
		"txt": " (We'll show you in ",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5726,
		"nouns": [
			"ll",
			"show"
		],
		"dOIndex": 638,
		"ignoreDOBcNoQuotes": true,
		"isQuote": false
	},
	{
		"txt": "Chapter 10 how to deal with that situation.)",
		"why": "lastExUIWasLink",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5727,
		"nouns": [
			"Chapter",
			"situation"
		],
		"dOIndex": 639,
		"nouns2": [
			"Chapter",
			"situation"
		],
		"isQuote": false
	},
	{
		"txt": "",
		"why": "p",
		"tags": [],
		"sentenceIndex": 5728,
		"nouns": [],
		"dOIndex": 640
	},
	{
		"txt": "In general, tuning is a necessary part of developing physics based simulations, and we encourage you to experiment trying different combinations of parameters to see what results you can achieve. ",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5729,
		"nouns": [
			"part",
			"physics",
			"simulations",
			"experiment",
			"combinations",
			"parameters",
			"results"
		],
		"dOIndex": 641,
		"nouns2": [
			"physics",
			"simulations",
			"experiment",
			"combinations",
			"parameters",
			"results"
		],
		"sentiment": {
			"score": 2,
			"comparative": 0.06451612903225806,
			"words": [
				"encourage"
			],
			"positive": [
				"encourage"
			],
			"negative": []
		}
	},
	{
		"txt": " You should even try combinations that may break the example in this chapter to see what happens and what you should try to avoid in a deployed ",
		"why": "link",
		"tags": [
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5730,
		"nouns": [
			"combinations",
			"example",
			"chapter"
		],
		"dOIndex": 642,
		"nouns2": [
			"combinations",
			"example",
			"chapter"
		],
		"sentiment": {
			"score": -1,
			"comparative": -0.034482758620689655,
			"words": [
				"avoid"
			],
			"positive": [],
			"negative": [
				"avoid"
			]
		}
	},
	{
		"txt": "game.",
		"why": "split inside sentence",
		"tags": [],
		"sentenceIndex": 5731,
		"nouns": [
			"game"
		],
		"dOIndex": 643
	},
	{
		"txt": "",
		"why": "link",
		"tags": [
			"a",
			"p",
			"div",
			"section"
		],
		"sentenceIndex": 5732,
		"nouns": [],
		"dOIndex": 644
	}
]